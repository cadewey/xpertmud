#ifndef SYSINIT_PL_H
#define SYSINIT_PL_H

/* File automagically generated by pl2h.pl. Do not edit! */

static const char *script[] = {
"use warnings;\n",
"no warnings qw/once/;\n",
"use strict;\n",
"\n",
"use vars qw($onTextEntered $onKeyPressed $onTextReceived $onTimer $onHelp\n",
"	    $onConnectionEstablished $onConnectionDropped\n",
"	    $statusWindow $onEcho $isEcho $localEcho\n",
"	    $onLineReceived $writeAtOnceRegExp $dontWriteAtOnceRegExp\n",
"\n",
"	    $aliasPreprocessing $keyPreprocessing $triggerPreprocessing\n",
"\n",
"	   );\n",
"\n",
"\n",
"$isEcho = 1;\n",
"\n",
"my @aliases;\n",
"my @keyBindings;\n",
"my @triggers;\n",
"my @timers;\n",
"my @delayed;\n",
"\n",
"my $time = 0.0;\n",
"\n",
"sub BLACK   { return 0; }\n",
"sub RED     { return 1; }\n",
"sub GREEN   { return 2; }\n",
"sub YELLOW  { return 3; }\n",
"sub BLUE    { return 4; }\n",
"sub MAGENTA { return 5; }\n",
"sub CYAN    { return 6; }\n",
"sub WHITE   { return 7; }\n",
"sub INTENSIVE { return 8; }\n",
"\n",
"############## GLOBAL STUFF ######################\n",
"tie *STDOUT,\"XMRedirector\", statusWindow();\n",
"tie *STDERR,\"XMRedirector\",  statusWindow(),RED;\n",
"tie *STDIN,\"XMRedirector\", statusWindow(),MAGENTA;\n",
"\n",
"$SIG{__WARN__}=sub { XM::showError($_[0]); };\n",
"\n",
"END {\n",
"  # cleanup, to prevent warnings during global construction to scramble the stack\n",
"  untie *STDOUT;\n",
"  untie *STDERR;\n",
"  untie *STDIN;\n",
"  $SIG{__WARN__}='DEFAULT';\n",
"}\n",
"##################################################\n",
"\n",
"############### HELP STUFF #######################\n",
"my $helpNode = new XMXmlNode(\"xmhelp\");\n",
"my $helpAll = undef;\n",
"\n",
"sub recreateHelpAll {\n",
"  $helpAll = new XMXmlNode(\"help\");\n",
"  $helpAll->setAttribute(\"name\", \"Xpertmud Online Help\");\n",
"  foreach my $node (@{ $helpNode->getSubNodes() }) {\n",
"    if($node->getTagName() eq \"help\") {\n",
"      foreach my $inner(@{ $node->getSubNodes() }) {\n",
"	$helpAll->addChild($inner);\n",
"      }\n",
"    }\n",
"  }\n",
"}\n",
"\n",
"sub addHelp {\n",
"  my ($nodes) = @_;\n",
"  foreach my $node (@$nodes) {\n",
"    foreach my $nodeIn (@{ $helpNode->getSubNodes() }) {\n",
"      if($node->getAttribute('id') eq $nodeIn->getAttribute('id')) {\n",
"	$helpNode->removeChild($nodeIn);\n",
"      }\n",
"    }\n",
"    $helpNode->addChild($node);\n",
"  }\n",
"  recreateHelpAll();\n",
"}\n",
"\n",
"sub parseHelp {\n",
"  my ($file) = @_;\n",
"  my $found = 0;\n",
"  foreach my $path (@INC) {\n",
"    my $helpParserDTD = new helpdtd();\n",
"    my $helpParser = XMXmlParser($helpParserDTD);\n",
"    my $f;\n",
"    if(open($f, $path . \"/\" . $file)) {\n",
"      $found = 1;\n",
"      while(my $line = <$f>) {\n",
"	$helpParser->parse($line);\n",
"      }\n",
"      addHelp($helpParser->getNodes());\n",
"      close $f;\n",
"      last;\n",
"    }\n",
"  }\n",
"  if(not $found) {\n",
"    XM::showError(\"File not found: \\\"$file\\\"\\n\");\n",
"  }\n",
"}\n",
"\n",
"\n",
"{\n",
"  my $inlineHelpParserDTD = new helpdtd();\n",
"  my $inlineHelpParser = new XMXmlParser($inlineHelpParserDTD);\n",
"  $inlineHelpParser->parse(q'<?xml version=\"1.0\"?>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<help lang=\"en\" id=\"xm-functions\" name=\"Xpertmud Online Help - Functions\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"#\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'If you write a # at the beginning of a line then the line is processed by the <pe>perl</pe><py>python</py> interpreter. The statement is executed in global space<pe>, but be aware that because of the ' . \"'\" . q'strict' . \"'\" . q'-directive and the block-binding of the ' . \"'\" . q'my' . \"'\" . q'-keyword you' . \"'\" . q're only able to define variables via the ' . \"'\" . q'use vars' . \"'\" . q'-directive</pe><py>, so you can simply assign and read variables as you' . \"'\" . q'd do with the python interpreter shell</py>.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>See also the help on ## (multiple line commands) and % (easy function calls)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	Type into the input line:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <pe>#use vars qw/$firstVar $secondVar/' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	Now we' . \"'\" . q've definied two variables globally' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	#$firstVar = new XMTextWindow()</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <py>#a = XMTextWindow()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	#a.setTitle(\"A Window\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"##\" restriction=\"py\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Typed at the beginning of a line, the line is stored in an input buffer. If you then enter ## alone, the input buffer is parsed by the python interpreter. This enables you to do multiline editing.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Note that multiline editing can be also done by using the # directive and getting new lines with ctrl-return. Now you can enter functions and stuff just like you would do in a text editor.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	##def myfunc():' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	##  prs(\"Hello World!\\n\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	##' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	Now we can use the defined function:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	#myfunc()</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"%\" restriction=\"py\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'The python syntax is rather restrictive and the command line user is rather lazy. Typed at the beginning of a line, the line is interpreted as ' . \"'\" . q'easy function call' . \"'\" . q'. The first word in the line is the function name. All following words or strings are string arguments to the function. This only works with functions that take only string arguments!' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	Type at the command line:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	%help %' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	This becomes: help(\"%\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	%help \"Step-by-Step: Window Positions\"' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	This becomes: help(\"Step-by-Step: Window Positions\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	%help Step-by-Step: Window Positions' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	becomes: help(\"Step-by-Step:\", \"Window\", \"Positions\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	and yields in an error message' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	You can use it like:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	##def myfunc(t1, t2, t3):' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	##  prs(t1 + \"/\" + t2 + \":\" + t3)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	##' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	%myfunc Hallo \"Dies ist ein Test\\\\\"Mit allem Drum\" und_dran' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	becomes: myfunc(\"Hallo\", \"Dies ist ein Test\\\\\"Mit allem Drum\", \"und_dran\")</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"activeWindow\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the XMTextWindow object of the focused text window.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"addAlias\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"name\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The alias' . \"'\" . q's name (used by other functions to access this alias).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      Assume you typed a line. If line matches regExp the alias is \"triggered\".' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"do\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<pe>If you give a string here, the line you typed is processed like s/regExp/do/g, and then printed to the server like usual. If you specify a sub ref, then the sub is called with line as it' . \"'\" . q's argument. The sub' . \"'\" . q's return value is printed to the server like usual.</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <py>The line you type is processed like re.subn(regExp, do, line). So you can specify a string or function object.</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"breakOn\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      1, if the execution of aliases should stop if this one matched, 0 otherwise (default = 0).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"isActive\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The initial alias state (default = 1, see setAliasState).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	addAlias(\"My_Alias1\", \"^gg\", \"me' . \"'\" . q's grinning...\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# this adds a alias which sends \"me' . \"'\" . q's grinning...\"' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# if you type \"gg\" at the input line</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"addDelayed\"> ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"name\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The delay' . \"'\" . q's name (used by other functions to access this delay).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"delay\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The action will be performed at getTime() + delay.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"do\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      If you give a string here, the string is sent to the server. If you specify a <pe>sub ref</pe><py>function object</py>, it' . \"'\" . q's executed.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	addDelayed(\"MyDelayed\", 10, \"Action!\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# Action! will be sent to the server in 10 tics</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"addKeyBinding\"> ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"name\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The keybinding' . \"'\" . q's name (used by other functions to access this keybinding).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"onKey\">	' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      If the representation (see below) of the pressed key matches onKey, the keybinding is triggered.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"do\">	' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      If you give a string here, the string is sent to the server.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<pe>If you specify a sub ref, it' . \"'\" . q's executed (you can access the key by the perl $1...$n variables. The last match was your onKey regexp match). If the sub returned true, the key is considered \"used\" and not processed any further.</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<py>If you specify a function object, it' . \"'\" . q's executed getting the match object as parameter.</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"isActive\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The initial keybinding state (default = 1, see setKeyBindingState).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<pe>addKeyBinding(' . \"'\" . q'Underscore' . \"'\" . q', ' . \"'\" . q'..10.... (.*)' . \"'\" . q',' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'		      sub { XM::send(\"_$1\\n\"); return 1; }</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<py>def ctrla(m):' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  XM.send(\"_\" + m.group(1) + \"\\n\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  return 1' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	addKeyBinding(' . \"'\" . q'Underscore' . \"'\" . q', ' . \"'\" . q'.1...... (.*)' . \"'\" . q', ctrla)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# If you press ctrl-a, for example, \"_a\" is sent' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# to the server</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"addTimer\"> ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"name\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The timer' . \"'\" . q's name (used by other functions to access this timer).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"inc\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      Specify the amount of seconds between two calls to this timer.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"do\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      If you give a string here, the string is sent to the server. If you specify a <pe>sub ref</pe><py>function object</py>, it' . \"'\" . q's executed.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"isActive\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The initial timer state (default = 1, see setTimerState)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	addTimer(\"My_Timer1\", 0.5, \"Hello, it' . \"'\" . q's me\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# The string \"Hello, it' . \"'\" . q's me\" is written to the' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# server two times a second.</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"addTrigger\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"name\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The trigger' . \"'\" . q's name (used by other functions to access this trigger).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      Assume a line is read from the server. If line =~ regExp the trigger is \"triggered\".' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"do\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <pe>If you give a string here, the line from the server is processed like s/regExp/do/g, and then printed like usual. If you specify a sub ref, then the sub is called with line as it' . \"'\" . q's argument. The sub' . \"'\" . q's return value is printed like usual.</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <py>The line from the server is processed like re.subn(regExp, do, line). So you can specify a string or function object.</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"breakOn\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      1, if the execution of triggers should stop if this one matched, 0 otherwise (default = 0).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"isActive\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      The initial trigger state (default = 1, see setTriggerState).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </arg>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	addTrigger(\"My_Trig1\", \"^evil guy says:\", \"\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# this adds a trigger which hides every line starting' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# with \"^evil guy says:\"</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"connection\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"id\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the XMConnection object for the specified connection id. Connection ids are configured via the bookmark editor, where 0 is always the default connection. You will need multiple connections only in some special cases. Usually connection(0) will be your way to access your active connection.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"delAlias\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      Delete all aliases who' . \"'\" . q's name matches regExp.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	delAlias(\"^My_\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all aliases who' . \"'\" . q's name start with My_' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	delAlias(\"a\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all aliases with an a in their name</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"delDelayed\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Delete all delays who' . \"'\" . q's name matches regExp.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	delDelayed(\"^My_\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all delays who' . \"'\" . q's name start with My_' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	delDelayed(\"a\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all delays with an a in their name</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"delKeyBinding\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      Delete all key bindings who' . \"'\" . q's name matches regExp.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	delKeyBinding(\"^My_\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all key bindings who' . \"'\" . q's name start with My_' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	delKeyBinding(\"a\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all key bindings with an a in their name</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"delTimer\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      Delete all timers who' . \"'\" . q's name matches regExp.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	delTimer(\"^My_\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all timers who' . \"'\" . q's name start with My_' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	delTimer(\"a\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all timers with an a in their name</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"delTrigger\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Delete all triggers who' . \"'\" . q's name matches regExp.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	delTrigger(\"^My_\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all triggers who' . \"'\" . q's name start with My_' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	delTrigger(\"a\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# delete all triggers with an a in their name</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"focusedInputLine\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the XMInputLine object for the focused input line.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"getTime\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the time in tics. One tic is a quarter of a second.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"listAliases\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'List all current aliases.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"listDelayed\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'List all current delays.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"listKeyBindings\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'List all current key bindings.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"listTimers\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'List all current timers.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"listTriggers\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'List all current triggers.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"parse\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"script\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'This is used to parse a script in <pe>@INC</pe><py>sys.path</py> by using the <pe>perl do</pe><py>python exec</py> command. <pe>The only differnce is that parse will print an error if perl reports errors during do. So t</pe><py>T</py>his is the recommended way to load your scripts.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	parse(\"myscript.pl\")<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <pe>statusWindow->print(@INC.\"\\n\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <py>statusWindow().write(str(sys.path))' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# to show the include path</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"parseHelp\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"file\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Parse a help xml file (like those in xpertmud/scripting/help that come with the xpertmud source package). Adds the content of the help xml file to the current help system. Use this if you want to document scripts or plugins you' . \"'\" . q've written.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"prs\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"text\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'This is simply shorthand for writing' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <pe>statusWindow()->print($text);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <py>statusWindow().write(text)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Don' . \"'\" . q't use this in your scripts, cause it makes them less readable, but at the command line it' . \"'\" . q's valuable ;-)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"resetWriteRegExps\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Reset the write regexps to default values.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See setWriteRegExps() for extensive information.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"setAliasState\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the state of all aliases who' . \"'\" . q's name matches regExp to state. A state of 0 means that this alias is not processed.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	setAliasState(\"^My_Mode1_\", 0)<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# disable all aliases that got names starting' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# with My_Mode1_</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"setDelayed\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"delay\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the time incremnt of all delays who' . \"'\" . q's name matches regExp to delay.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	setDelayed(\"^My_Mode1_\", 15)<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# All delays that got names starting with' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# My_Mode1_ will be executed in 15 tics</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"setKeyBindingState\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the state of all key bindings who' . \"'\" . q's name matches regExp to state. A state of 0 means that this key binding is not processed.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	setKeyBindingState(\"^My_Mode1_\", 0)<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# disable all key bindings that got names starting' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# with My_Mode1_</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"setLocalEcho\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'If set to 0, the text typed on the command line will not be printed to the status window.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"setTimerState\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the state of all timers who' . \"'\" . q's name matches regExp to state. A state of 0 means that this timer is not processed.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	setTimerState(\"^My_Mode1_\", 0)<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# disable all timers that got names starting' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# with My_Mode1_</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"setTimerInc\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"newInc\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      Change the increment (interval) of all timers who' . \"'\" . q's name matches regExp to newInc.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	setTimerInc(\"^My_Mode1_\", 1.0)<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# all timers that got names starting' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# with My_Mode1_ will be executed every second</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"setTriggerState\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"regExp\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the state of all triggers who' . \"'\" . q's name matches regExp to state. A state of 0 means that this trigger is not processed.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	setTriggerState(\"^My_Mode1_\", 0)<pe>;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# disable all triggers that got names starting' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# with My_Mode1_</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"setWriteRegExps\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"writeAtOnce\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <arg name=\"dontWriteAtOnce\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <para>Sets the <pe>$</pe>writeAtOnceRegExp and <pe>$</pe>dontWriteAtOnce variables to the given values. To set only one, leave the other undef.</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <para>This mainly influences, how a string coming from the server is parsed. The problem is: The server may send a line in five parts, and it may send some lines at once, just like it likes to. So now we mostly want to base triggers on complete lines. For example a trigger for \"evil guy says: \" will not be executed, if the server sends \"evil g\" in one packet and \"uy says: something\\n\" in the next packet. Therefor xpertmud has the ability to cache the output of a line until a complete line' . \"'\" . q's finished and call the triggers with the complete line. ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'The problem is now, that sometimes you want to see and use triggers on lines, which are not complete (for example prompts). Xpertmud can' . \"'\" . q't solve this problem by itself, so there are two variables:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <code><pe>$</pe>writeAtOnceRegExp     (default = \".?\")  and ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>$</pe>dontWriteAtOnceRegExp (default = \"^\\$\")</code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      which you can set according to your own needs.</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <para>Xpertmud than does the following:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'          <pe>	if(&lt;line is not complete&gt; &amp;&amp;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	   ($line =~ /$writeAtOnceRegExp/) &amp;&amp;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	   ($line !~ /$dontWriteAtOnceRegExp/)) {' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  execute triggers on the line part;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  print the line part;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	} else {' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  cache the line part without doing anything yet;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	}</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'          <py>	if &lt;line is not complete&gt; and' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	     re.search(writeAtOnceRegExp, line) != None and' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	     re.search(dontWriteAtOnceRegExp, line) == None:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  execute triggers on the line part' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  print the line part' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	else:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  cache the line part without doing anything yet</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      This means that by default all text is written to the status window even if it' . \"'\" . q's not a full line.</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <para>There are two variables, so you can choose which to set according to the mud you' . \"'\" . q're playing. If you mainly need full lines, you' . \"'\" . q'll set <pe>$</pe>writeAtOnceRegExp to match you' . \"'\" . q're few prompts or whatever and <pe>$</pe>dontWriteAtOnceRegExp to \"^\\$\". If you only occasionaly want to cache lines, you' . \"'\" . q'll set <pe>$</pe>writeAtOnceRegExp to \".*\" and <pe>$</pe>dontWriteAtOnceRegExp to match in occasions where you want caching.</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"showKeyNames\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <para>Show the key names as they are compared when triggering key bindings. The key names consist of the eight modifier bits and the key' . \"'\" . q's normal name. Let' . \"'\" . q's make that clear using an example...</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <para>Assume that you want to write \"kill bunny\" to the mud everytime you press shift-F3. Now at the command line type' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<code>#showKeyNames()</code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Then press shift-F3. You' . \"'\" . q'll see something like' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<code>00000000 Shift_L' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'10000000 F3</code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'The first is the key press event generated when pressing the shift key, the second is the shift-F3 event. Note that the first 1 means that the shift key is hold down. Now press \"x\" to leave the key name mode.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'So, now we know on what we have to match. A keybinding will be triggered whenever the specified regexp matches the key name we' . \"'\" . q've just seen. So' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'#addKeyBinding(\"MySlay\", \"^10000000 F3\\$\", \"kill bunny\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'will do exactly what we want. Nearly.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Try the following:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<code>#showKeyNames()</code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Press the caps-lock key.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Press some other key.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'You see? The caps-lock key generates a modifier. So the above example wouldn' . \"'\" . q't work if caps-lock is active. To prevent this we just write' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<code>#addKeyBinding(\"MySlay\", \"^10...... F3\\$\", \"kill bunny\");</code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Now this will cause the client to write \"kill bunny\"  whenever the shift key is hold down while pressing F3 and the ctrl-key is _not_ pressed, but any other modifier may be present.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <function name=\"statusWindow\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the status window (XMTextBufferWindow) instance.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example>	<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'          <pe>statusWindow()->hide();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	statusWindow().hide()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	statusWindow()->print(\"some text\\n\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'          <py>statusWindow().write(\"some text\\n\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'</help>' . \"\\n\");\n",
"  $inlineHelpParser->finish();\n",
"  addHelp($inlineHelpParser->getNodes());\n",
"}\n",
"{\n",
"  my $inlineHelpParserDTD = new helpdtd();\n",
"  my $inlineHelpParser = new XMXmlParser($inlineHelpParserDTD);\n",
"  $inlineHelpParser->parse(q'<?xml version=\"1.0\"?>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<help lang=\"en\" id=\"xm-topics\" name=\"Xpertmud Online Help - Topics\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <topic name=\"Step-by-Step\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Some step by step tutorials for specific tasks. You can follow them by just copying each line into your input line. (Don' . \"'\" . q't forget to put a ' . \"'\" . q'#' . \"'\" . q' at the beginning of each line)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <topic name=\"Triggers On Colored Text\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Most muds give you colored output. The colors are just characters in your string, so you have to be careful. Let' . \"'\" . q's assume the Mud sends something like:' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <code><cr><cB>Tower of Doom:</cB></cr> Exits: <cg>N W SW</cg> Doooooomy</code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Now we want to parse the room description and all exits. A regexp like \"^([\\w\\s]+): (\\w\\s)+(\\w+)\" won' . \"'\" . q't work because of the color codes hiding inside the text.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'If you don' . \"'\" . q't need color information at all, you can use the above regexp on XM<pe>::</pe><py>.</py>ansiToRaw(<pe>$</pe>text).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <pe>	sub rawParser {' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  if(XM::ansiToRaw($1) =~ /^([\\w\\s]+): (\\w\\s)+(\\w+)/) {' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    statusWindow()->print(\"Triggered!\\n\");' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  }' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	}' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	addTrigger(\"RawParser\", qw/^(.*)$/, rawParser);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'              <py>	def rawParser(m):' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  if re.match(r' . \"'\" . q'^([\\w\\s]+): (\\w\\s)+(\\w+)' . \"'\" . q', XM.ansiToRaw(m.group(0))):' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    statusWindow().write(\"Triggered!\\n\");' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	addTrigger(\"RawParser\", r' . \"'\" . q'^(.*)$' . \"'\" . q', rawParser)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    </alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'If you need to distinguish between colors, use XM<pe>::</pe><py>.</py>ansiToColored(<pe>$</pe>text). This ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </topic>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <topic name=\"Window Positions\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Firstly, let us create some windows' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <pe>	$a = new XMTextWindow(\"First\");' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$b = new XMTextWindow(\"Second\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <py>	a = XMTextWindow(\"First\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	b = XMTextWindow(\"Second\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    </alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Now resize the status window to 80 chars width, the height doesn' . \"'\" . q't matter, we' . \"'\" . q'll take care of that later' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <pe>	statusWindow()->resizeChars(80, 10);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <py>	statusWindow().resizeChars(80, 10)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    </alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Resize the status window to 80 chars width and full height' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <pe>	statusWindow()->resize(statusWindow()->getSizeX(), XM::mdiHeight());</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <py>	statusWindow().resize(statusWindow().getSizeX(), XM.mdiHeight())</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    </alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Move the first window to the right of the status window' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <pe>	$a->move(statusWindow()->getSizeX(), 0);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <py>	a.move(statusWindow().getSizeX(), 0)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    </alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Resize the first window to use the full width of the mdi window and half the mdi window' . \"'\" . q's height' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <pe>	$a->resize(XM::mdiWidth()-statusWindow()->getSizeX(), XM::mdiHeight()/2);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$a->show();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <py>	a.resize(XM.mdiWidth()-statusWindow().getSizeX(), XM.mdiHeight()/2)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	a.show()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    </alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Let' . \"'\" . q's get a second window in the empty space without the caption.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  <code><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <pe>	$b->hideCaption();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$b->move(statusWindow()->getSizeX(), $a->getSizeY());' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$b->resize($a->getSizeX(), XM::mdiHeight()-$a->getSizeY());' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$b->show();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$b->print(\"Done.\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	      <py>	b.hideCaption()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	b.move(statusWindow().getSizeX(), a.getSizeY())' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	b.resize(a.getSizeX(), XM.mdiHeight()-a.getSizeY())' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	b.show()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	b.write(\"Done.\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	    </alt></code>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</para>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </topic>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </topic>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'</help>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->finish();\n",
"  addHelp($inlineHelpParser->getNodes());\n",
"}\n",
"{\n",
"  my $inlineHelpParserDTD = new helpdtd();\n",
"  my $inlineHelpParser = new XMXmlParser($inlineHelpParserDTD);\n",
"  $inlineHelpParser->parse(q'<?xml version=\"1.0\"?>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<help lang=\"en\" id=\"xm-classes\" name=\"Xpertmud Online Help - Classes\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <module name=\"XM\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'The functions in this module provide an interface to the C++ program. ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"ansiToRaw\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"text\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the string without ansi control sequences (e.g. ansi color codes etc.). Use this for more easy parsing of colored text from the server.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See \"Step-by-Step: Triggers On Colored Text\" for further help.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"ansiToColored\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"text\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the string without ansi controll sequences, but still containing color information. The returned string is of the form \"FBCFBCFBC...\" where F is the foreground color, B is the background color and C is the actual character.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See \"Step-by-Step: Triggers On Colored Text\" for further help.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	prs(XM.ansiToColored(\"test\"))</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	prs(XM::ansiToColored(\"test\"))</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"echoMode\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the clients echo mode. If echo mode is on, characters typed on the keyboard are shown in the input line. If echo mode is off, an \"*\" appears for each character typed.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	XM::echoMode(0);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	XM.echoMode(0)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"mdiHeight\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the mdi window' . \"'\" . q's height. Use this to resize your windows so that all space is used perfectly. See XMWindow<pe>::</pe><py>.</py>hideCaption() to learn how to get even more space.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See \"Step-by-Step: Window Positions\" for further help.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"mdiWidth\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the mdi window' . \"'\" . q's width. Use this to resize your windows so that all space is used perfectly. See XMWindow<pe>::</pe><py>.</py>hideCaption() to learn how to get even more space.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See \"Step-by-Step: Window Positions\" for further help.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"playAudio\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"audiofile\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Make xpertmud play an audio file via kde/qt' . \"'\" . q's audio system.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	XM::playAudio(\"/home/me/myfile.wav\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	XM.playAudio(\"/home/me/myfile.wav\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"resetStatusMsg\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the status message to a client default value.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	XM::resetStatusMsg();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	XM.resetStatusMsg()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"send\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"text\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"id\" default=\"0\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Send a string to the server. Usually there should be a newline at the end of the string. The id specifies the connection you want to send to (see XM<pe>::</pe><py>.</py>open).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	XM::send(\"slay evil bear\\n\");' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	XM::send(\"sending to connection 42\\n\", 42);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	XM.send(\"slay evil bear\\n\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	XM.send(\"sending to connection 42\\n\", 42)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setStatusMsg\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"message\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the text shown in the client' . \"'\" . q's status line. The C++ part of the client sometimes sets this message, for example while trying to open a connection.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	XM::setStatusMsg(\"Retrieved opponent info\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	XM.setStatusMsg(\"Retrieved opponent info\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"showError\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"errorMessage\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Show an error information in the status window.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example>	# Do something which could cause' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  	# some error' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	if(@_) { XM::showError(@_); }</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	XM.showError(\"This is MyOwn Error!\\n\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </module>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <class name=\"XMWindow\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'This is the base class for all scriptable window classes.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"close\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Close and destroy a window. On destruction a window is closed automagically.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->close();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.close()</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# is equivalent to' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win = undef;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win = None</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# if <pe>$</pe>win is the only reference to ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# the window and you don' . \"'\" . q't use <pe>$</pe>win' . \"\\n\");\n",
"  $inlineHelpParser->parse(q' 	# afterwards' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win2 = $win;</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win2 = win</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# now there' . \"'\" . q's the difference' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# 1. possibility' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->close();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	statusWindow()->print($win2->isValid());</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.close()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	statusWindow().write(str(win2.isValid()))</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# will show false' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# 2. possibility' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win = undef;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	statusWindow()->print($win2->isValid());</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win = None' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	statusWindow().write(str(win2.isValid()))</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# will show true</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getPositionX\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the x coordinate of the window' . \"'\" . q's position. ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See also XMWindow<pe>::</pe><py>.</py>move.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$x = $win->getPositionX();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	x = win.getPositionX()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getPositionY\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the y coordinate of the window' . \"'\" . q's position.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See also XMWindow<pe>::</pe><py>.</py>move.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$y = $win->getPositionY();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	y = win.getPositionX()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getSizeX\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the window' . \"'\" . q's width.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See also XMWindow<pe>::</pe><py>.</py>resize.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$width = $win->getSizeX();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	width = win.getSizeX()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getSizeY\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the window' . \"'\" . q's height.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See also XMWindow<pe>::</pe><py>.</py>resize.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$height = $win->getSizeY();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	height = win.getSizeY()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"hide\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Used to hide a window from the screen. Use show to revert the effect.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"hideCaption\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Hide the window' . \"'\" . q's caption bar if not maximized. The caption bar contains the window' . \"'\" . q's name and some buttons (minimize / maximize / close). This is extremely useful to save some space if you show multiple windows at once.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->resize(250, 250);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->hideCaption();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.resize(250, 250)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.hideCaption()</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# now you have much space for other windows</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"isValid\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'True if this window has not been closed. ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'See XMWindow<pe>::</pe><py>.</py>close for more info.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"lower\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Lower a window to the background, so other windows behind it will become visible.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->lower();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.lower()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"maximize\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Maximize a window.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->maximize();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.maximize()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"minimize\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Minimize a window.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->minimize();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.minimize()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"move\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"x\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"y\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Move the window' . \"'\" . q's left upper corner to the point (x, y) relative to the MDI Widget. x and y are pixel values.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->move(0, 0);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.move(0, 0)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"raise\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Raise this window to the top, so it will become visible if other windows are in front of it.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->raise();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.raise()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"resize\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"width\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"height\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Resize the window to width and height. The variables are given in pixels.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->resize(300, 100);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.resize(300, 100)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setTitle\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"title\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the windows caption to title.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setTitle(\"A nice Window\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setTitle(\"A nice Window\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"show\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Show the window if it' . \"'\" . q's hidden. On creation windows are hidden by default.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->show();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.show()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"showCaption\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Show the window' . \"'\" . q's caption bar if not maximized. The caption bar contains the window' . \"'\" . q's name and some buttons (minimize / maximize / close).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->showCaption();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.showCaption()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </class>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <class name=\"XMTextWindow\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'(Direct child class of XMWindow)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'This is a standard text window class used for the output of status information. It' . \"'\" . q's basically just a big character buffer.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win = new XMTextWindow(); # it' . \"'\" . q's still hidden' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->move(0, 0);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->resizeChars(30, 100);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->show();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->setCursor(14, 0);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->print(\"Some nice heading\\n\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win = XMTextWindow() # it' . \"'\" . q's still hidden' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.move(0, 0)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.resizeChars(30, 100)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.show()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.setCursor(14, 0)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.write(\"Some nice heading\\n\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"clear\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Guess what?' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->clear();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.clear()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"clearEOL\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Clear from the current cursor position to the end of the line.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setCursor(13, 14);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->clearEOL();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setCursor(13, 14)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.clearEOL()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"clearBOL\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Clear from the current cursor position to the beginning of the line.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"clearEOS\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Clear from the current cursor position to the end of the screen.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"clearBOS\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Clear from the current cursor position to the beginning of the screen' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"clearLine\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Clear the current line (the one the cursor is in).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setCursor(0, 25);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->clearLine();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setCursor(0, 24)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.clearLine()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"disableMouseEvents\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Disable mouse events in this window. Selecting text won' . \"'\" . q't work in this window if the script get' . \"'\" . q's the mouse events.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"enableMouseEvents\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Enable mouse events in this window. Selecting text won' . \"'\" . q't work in this window if the script get' . \"'\" . q's the mouse events.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getCharAt\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"x\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"y\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Return the character you can see at position (x, y) inside the window.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$char = $win->getCharAt(2, 5);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	aChar = win.getCharAt(2, 5)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getColumns\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the window' . \"'\" . q's width in columns, e.g. how many characters fit into a line.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$width = $win->getColumns();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	width = win.getColumns()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getCursorPos\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the cursor position (x, y).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	($x, $y) = $win->getCursorPos();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	(x, y) = win.getCursorPos()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getCursorX\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the x-coordinate of the current cursor position.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$x = $win->getCursorX();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	x = win.getCursorX()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getCursorY\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the y-coordinate of the current cursor position.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$y = $win->getCursorY();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	y = win.getCursorY()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getFGColorAt\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"x\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"y\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the foreground color at position x, y.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$c = $win->getFGColorAt(10, 5)</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	c = win.getFGColorAt(10, 5)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getBGColorAt\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"x\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"y\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the background color at position x, y.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$c = $win->getBGColorAt(10, 5)</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	c = win.getBGColorAt(10, 5)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getLines\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the window' . \"'\" . q's height in lines, e.g. how many characters fit into a row.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$height = $win->getLines()</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	height = win.getLines()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"newline\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'The same as <pe>$</pe>win<pe>-></pe><py>.</py>print(\"\\n\") would do on a XMTextBufferWindow. XMTextWindows don' . \"'\" . q't evaluate \\n, so you have to use newline() instead.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->print(\"Hallo\");' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->newline();</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.write(\"Hallo\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.newline()</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"printRaw\" restriction=\"pe\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"text\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Print some text to the window. ANSI control sequences are not processed, use print for text directly from the mud server.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example>	$win->printRaw(\"Some raw text\")</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"writeRaw\" restriction=\"py\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"text\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Print some text to the window. ANSI control sequences are not processed, use write for text directly from the mud server.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example>	win.writeRaw(\"Some raw text\")</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"print\" restriction=\"pe\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"text\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Print ANSI formatted text to the window. You can simply pass anything coming from the server.  Pay attention when using regexps on ANSI formatted text!' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example>	$win->print($textFromServer);</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"write\" restriction=\"py\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"text\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Print ANSI formatted text to the window. You can simply pass anything coming from the server.  Pay attention when using regexps on ANSI formatted text!' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example>	win.write(textFromServer)</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"registerMouseDownEvent\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"function\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'If the widget gets mouse events (see enableMouseEvents()), the function is called whenever a mouse down event occurs. The function gets the coordinates of the mouse event as parameters.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->registerMouseDownEvent(sub {' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  my $x = shift;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  my $y = shift;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  statusWindow()->print($x.\", \".$y);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	});</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	def mdEvent(x, y):' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  statusWindow().print(str(x) + \", \" + str(y))' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.registerMouseDownEvent(mdEvent)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"registerMouseDragEvent\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"function\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'If the widget gets mouse events (see enableMouseEvents()), the function is called whenever a mouse drag event occurs. The function gets the coordinates of the mouse event as parameters.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->registerMouseDragEvent(sub {' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  my $x = shift;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  my $y = shift;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  statusWindow()->print($x.\", \".$y);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	});</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	def mdEvent(x, y):' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  statusWindow().print(str(x) + \", \" + str(y))' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.registerMouseDragEvent(mdEvent)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"registerMouseUpEvent\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"function\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'If the widget gets mouse events (see enableMouseEvents()), the function is called whenever a mouse up event occurs. The function gets the coordinates of the mouse event as parameters.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->registerMouseUpEvent(sub {' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  my $x = shift;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  my $y = shift;' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  statusWindow()->print($x.\", \".$y);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	});</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	def muEvent(x, y):' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	  statusWindow().print(str(x) + \", \" + str(y))' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.registerMouseUpEvent(muEvent)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"resetAttributes\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Reset all ANSI attributes (color and state).' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setBold(1);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->setBGColor(RED);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->print(\"bold and red\");' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->resetAttributes();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->print(\"just plain\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setBold(1)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.setBGColor(RED)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.write(\"bold and red\")' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.resetAttributes()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.write(\"just plain\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"resizeChars\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"width\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"height\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Resize the window so that exactly width characters fit in a line and height characters in a row.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->resizeChars(23, 42);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.resizeChars(23, 42)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"scrollColumns\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"num\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Scroll the window' . \"'\" . q's content by num columns. A positive value means scrolling right, a negative scrolling to the left.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->scrollColumns(3);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.scrollColumns(3)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"scrollLines\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"num\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Scroll the window' . \"'\" . q's content by num lines. A positive value means scrolling down (like the page down key), a negative scrolling up.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      ' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->scrollLines(-3);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.scrollLines(-3)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setBold\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the default printing style to bold, if state is true, otherwise to unbold.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setBold(1);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setBold(1)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setBlinking\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'THIS IS CURRENTLY _NOT_ SUPPORTED!!!!!!! Set the default printing style to blinking, if state is true, otherwise to unblinking.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setBlinking(1);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setBlinking(1)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setCursor\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"x\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"y\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the cursor to position (x, y) inside the window.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setCursor(4, 4);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setCursor(4, 4)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setDefaultBGColor\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"color\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Sets the background color which will be drawn if all attributes are set to default values.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->resetAttributes();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->setDefaultBGColor(BLUE);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->print(\"Blue\\n\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.resetAttributes()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.setDefaultBGColor(BLUE)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.write(\"Blue\\n\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setDefaultFGColor\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"color\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Sets the foreground color which will be drawn if all attributes are set to default values.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->resetAttributes();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->setDefaultFGColor(BLUE);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->print(\"Blue\\n\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.resetAttributes()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.setDefaultFGColor(BLUE)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.write(\"Blue\\n\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setFont\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"name\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"size\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the window' . \"'\" . q's font to name and size.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setFont(\"fixed\", 15); # somehow large...</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setFont(\"fixed\", 15) # somehow large</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setIntensive\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the default printing style to intensive, if state is true, otherwise to unintensive.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setIntensive(1);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setIntensive(1)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setReverse\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the default printing style to reverse, if state is true, otherwise to unreverse.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setReverse(1);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setReverse(1)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setUnderline\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"state\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the default printing style to underline, if state is true, otherwise to ununderline.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setUnderline(1);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setUnderline(1)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setBGColor\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"color\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the window' . \"'\" . q's background color to a color from 0 to 7. There are also color constants BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN and WHITE.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setBGColor(RED); # is equal to' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->setBGColor(1);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setBGColor(RED) # is equal to' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.setBGColor(1)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setFGColor\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"color\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the window' . \"'\" . q's foreground color to a color from 0 to 7. There are also color constants BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN and WHITE.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->setFGColor(RED); # is equal to' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->setFGColor(1);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.setFGColor(RED) # is equal to' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.setFGColor(1)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </class>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <class name=\"XMTextBufferWindow\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'(Direct child class of XMTextWindow)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'The XMTextBufferWindow is just a XMTextWindow with a scrollback buffer. So there' . \"'\" . q's no new functionality, just some functions behave different, but just as you would expect it from a usual telnet widget.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win = new XMTextBufferWindow(); # it' . \"'\" . q's still hidden' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->move(0, 0);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->resizeChars(30, 10);' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->show();' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	$win->setCursor(14, 9);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win = XMTextBufferWindow() # it' . \"'\" . q's still hidden' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.move(0, 0)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.resizeChars(30, 10)' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.show()' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	win.setCursor(14, 9)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'</alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# this statement will cause the window to scroll' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# down one line automagically. A scrollbar will' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# appear at the widget' . \"'\" . q's right side...' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->print(\"Some nice heading\\n\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.write(\"Some nice heading\\n\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'</alt>	' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# the next statement will cause the window' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# to scroll to the beginning of the buffer.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# Unlinke XMTextWindow no new lines are' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# inserted. You can only scroll within the' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# filled area.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$win->scrollLines(-42);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	win.scrollLines(-42)</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <function name=\"getWordWrapColumn\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Get the column where word wrapping occurs. Negative values are counted from the right corner of the window.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <function name=\"setWordWrapColumn\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<arg name=\"x\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the column where word wrapping should occur. Negative values are counted from the right corner of the window. Setting the WordWrapColumn to zero disables word wrapping.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	</description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	<example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	statusWindow->setWordWrapColumn(80)</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	statusWindow().setWordWrapColumn(80)</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# wrap at 80, even if the window is smaller.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	statusWindow->setWordWrapColumn(-1)</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>	statusWindow().setWordWrapColumn(-1)</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# (the default) wrap at the right border</example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </class>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <class name=\"XMConnection\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'An XMConnection object can be used to control an xpertmud connection via the script. Each connection to the outside world gets an unique id (see the bookmark editor, there you can specify some default connections). You can open new connections at runtime via the XMConnection constructor, or you can access already open connections via the toplevel ' . \"'\" . q'connection' . \"'\" . q' function.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <example><alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	$c = new XMConnection(\"localhost\", 23);</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>    c = XMConnection(\"localhost\", 23)</py></alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# now you' . \"'\" . q've got a new connection.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# if you wish to access the default connection' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# which has id 0, use' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	connection(0)->send(\"say hello\\n\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>    connection(0).send(\"say hello\\n\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'</alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# to send something.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# As a shortcut for connection 0, you' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'	# can just use' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<alt>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<pe>	XM::send(\"say hello\\n\");</pe>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'<py>    XM.send(\"say hello\\n\")</py>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </alt></example>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"XMConnection\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"host\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"port\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"onConnect\" default=\"' . \"'\" . q'' . \"'\" . q'\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Creates a new connection object with the next free id and connects to the specified host on the specified port, sending <pe>$</pe>onConnect after the connection was established.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"open\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"host\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"port\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"onConnect\" default=\"' . \"'\" . q'' . \"'\" . q'\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Reuse the existing connection to connect to a new host on a new port. Use this for example, if you have some fallback mechanism for your mud server.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"close\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Close the connection.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setInputEncoding\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"enc\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the encoding xpertmud assumes when receiving text from the mud server to <pe>$</pe>enc. The encoding is specified as a string that describes the encoding, such as \"utf8\" or \"ISO8859-1\" (latin1). The default encoding is latin1. Xpertmud automatically changes to utf8 if the mud server tells xpertmud it' . \"'\" . q's using unicode, but otherwise you have to set your encoding manually. You can use any encoding that Qt understands, look for example at http://doc.trolltech.com/3.3/qtextcodec.html.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setOutputEncoding\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"enc\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'As with setInputEncoding you can set the stream' . \"'\" . q's encoding, but for the text xpertmud sends to the server. This is mostly not required, but if your mud server can handle it, xpertmud gives you the possibility to use your local encoding or even unicode.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </class>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  <class name=\"XMInputLine\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'The XMInputLine class let' . \"'\" . q's you control xpertmud' . \"'\" . q's input lines via the scripting engine. You can add new input lines via the menu and you can receive the current input line via the toplevel function ' . \"'\" . q'focusedInputLine' . \"'\" . q'. This allows you to implement tab completion and other nice features from your script.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getCursorX\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the X position of the cursor in the current paragraph of the input line. Be aware that the input line can have multiple paragraphs, each of which can be multiple lines.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"getCursorY\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Returns the Y position (current paragraph) of the cursor in the input line. Paragraphs can stretch over multiple visible lines (via line breaks), but there is never a newline inside a paragraph.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setCursorX\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"x\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set the cursor in the current paragraph to <pe>$</pe>x.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    <function name=\"setCursorY\">' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <arg name=\"y\" />' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      <description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'Set current paragraph to <pe>$</pe>y.' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'      </description>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'    </function>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'  </class>' . \"\\n\");\n",
"  $inlineHelpParser->parse(q'</help>' . \"\\n\");\n",
"  $inlineHelpParser->finish();\n",
"  addHelp($inlineHelpParser->getNodes());\n",
"}\n",
"\n",
"##################################################\n",
"\n",
"sub showKeyNames() {\n",
"  addKeyBinding(\"#SHOWKEYS\", \"^(.*)\\$\", sub {\n",
"		  statusWindow()->setFGColor(GREEN);\n",
"		  statusWindow()->print(\"$1\\n\");\n",
"		  statusWindow()->resetAttributes();\n",
"		  if($1 =~ /..... X/) {\n",
"		    delKeyBinding(\"^#SHOWKEYS\\$\");\n",
"		  }\n",
"		  return 1;\n",
"		}, 1);\n",
"  statusWindow()->print(\"Key name mode active, press \\\"x\\\" to\\nget back to normal mode\\n\");\n",
"}\n",
"\n",
"sub addIncludeDir( $ ) {\n",
"  push(@INC,shift);\n",
"}\n",
"\n",
"my %muxcodes=\n",
"    (\n",
"     '%%'=>'%', '%t'=>\"\\t\", '% '=>' ','%r'=>\"\\n\", \n",
"     '%cf'=>\"\\x1b[5m\", '%ci'=>\"\\x1b[7m\", \n",
"     '%ch'=>\"\\x1b[1m\", '%cn'=>\"\\x1b[0m\", '%cu'=>\"\\x1b[4m\", '%cx'=>\"\\x1b[30m\", \n",
"     '%cr'=>\"\\x1b[31m\", '%cg'=>\"\\x1b[32m\", '%cy'=>\"\\x1b[33m\", '%cb'=>\"\\x1b[34m\",\n",
"     '%cm'=>\"\\x1b[35m\", '%cc'=>\"\\x1b[36m\", '%cw'=>\"\\x1b[37m\", '%cX'=>\"\\x1b[40m\", \n",
"     '%cR'=>\"\\x1b[41m\", '%cG'=>\"\\x1b[42m\", '%cY'=>\"\\x1b[43m\", '%cB'=>\"\\x1b[44m\",\n",
"     '%cM'=>\"\\x1b[45m\", '%cC'=>\"\\x1b[46m\", '%cW'=>\"\\x1b[47m\"\n",
"     );\n",
"\n",
"sub ansi( $ ) {\n",
"    my $text=shift;\n",
"    my $out=\"\";\n",
"    foreach my $chunk (split /(\\%c[fihnuxrgybmcwXRGYBMCW]|\\%\\%|\\%[rts ])/, $text) {\n",
"	if (exists $muxcodes{$chunk}) {\n",
"	    $out.=$muxcodes{$chunk};\n",
"	} else {\n",
"	    $out .= $chunk;\n",
"	}\n",
"    }\n",
"\n",
"    return $out;\n",
"}\n",
"\n",
"sub prs { statusWindow()->print(shift); }\n",
"sub psw { statusWindow()->print(shift); }\n",
"\n",
"sub connection {\n",
"  my $id = shift || 0;\n",
"  return XMConnection::getByID($id);\n",
"}\n",
"\n",
"sub sendText {\n",
"  my $text = shift;\n",
"  my $id = shift || 0;\n",
"  connection($id)->send($text);\n",
"}\n",
"\n",
"sub activeWindow {\n",
"  return XMWindow::get(XM::getActiveWindow());\n",
"}\n",
"\n",
"sub focusedInputLine {\n",
"  return XMInputLine::getByID(XM::getFocusedInputLine());\n",
"}\n",
"\n",
"sub statusWindow {\n",
"  if (ref $statusWindow) {\n",
"    return $statusWindow;\n",
"  } else {\n",
"    my %tmp=(\n",
"	     _ID=>0\n",
"	    );\n",
"    $statusWindow= bless \\%tmp,\"XMTextBufferWindow\";\n",
"    $statusWindow->{_CIRCULAR}=$statusWindow;\n",
"    return $statusWindow;\n",
"  }\n",
"}\n",
"\n",
"\n",
"############################################################\n",
"# Trigger functions\n",
"############################################################\n",
"sub addTrigger {\n",
"  my ( $name, $regExp, $toExp, $flag, $active, $execute) = @_;\n",
"\n",
"  if(scalar(@_) < 5) {\n",
"    $active = 1;\n",
"  }\n",
"\n",
"  my $subRef = undef;\n",
"  my $desc = \"$name: \\t\";\n",
"  if(ref $toExp eq \"CODE\") {\n",
"      $desc .= \"/$regExp/ -> sub { ... }\";\n",
"      $desc =~ s/\\n/\\\\n/g;\n",
"      $subRef = sub {\n",
"	  $_ = shift;\n",
"	  if(/$regExp/) {\n",
"	      $_ = &$toExp($_);\n",
"	      return ( $flag, $_ );\n",
"	  } else {\n",
"	      return ( undef, $_ );\n",
"	  }\n",
"      };\n",
"  } elsif ($execute) {\n",
"      $desc .= \"/$regExp/ -> do($toExp)\";\n",
"      $desc =~ s/\\n/\\\\n/g;\n",
"      $subRef = sub {\n",
"	  my $line = shift;\n",
"	  if($line=~/$regExp/) {\n",
"	      wrap_onTextEntered($toExp);	      \n",
"	  }\n",
"	  return ( undef, $line );\n",
"      };\n",
"  } else {\n",
"      $desc .= \"s/$regExp/$toExp/g\";\n",
"      $desc =~ s/\\n/\\\\n/g;\n",
"      $subRef = sub {\n",
"	  $_ = shift;\n",
"	  if(s/$regExp/$toExp/g) {\n",
"	      return ( $flag, $_ );\n",
"	  } else {\n",
"	      return ( undef, $_ );\n",
"	  }\n",
"      };\n",
"  }\n",
"\n",
"  #statusWindow()->print(\"Adding trigger [ $desc ].\\n\");\n",
"  unshift(@triggers, [ $name, $desc, $subRef, $active ]);\n",
"}\n",
"\n",
"sub delTrigger {\n",
"  my $regExp = shift;\n",
"  my $l = $#triggers;\n",
"\n",
"  @triggers = grep { $_->[0] !~ /$regExp/ } @triggers;\n",
"\n",
"  my $diff = $l - $#triggers;\n",
"  #statusWindow()->print(\"Deleted $diff triggers.\\n\");\n",
"  return $diff;\n",
"}\n",
"\n",
"sub setTriggerState {\n",
"  my ($regExp, $active) = @_;\n",
"  my $count = 0;\n",
"  map { \n",
"    if($_->[0] =~ /$regExp/) {\n",
"      ++$count;\n",
"      $_->[3] = $active;\n",
"    }\n",
"  } @triggers;\n",
"\n",
"  #statusWindow()->print(\"Changed the state of $count triggers.\\n\");\n",
"  return $count;\n",
"}\n",
"\n",
"sub listTriggers {\n",
"  statusWindow()->setIntensive(1);\n",
"  statusWindow()->print(\"Trigger list:\\n\");\n",
"  statusWindow()->setIntensive(0);\n",
"  foreach my $trigger (@triggers) {\n",
"    my ( $name, $desc, $subRef, $active ) = @$trigger;\n",
"\n",
"    statusWindow()->print($desc);\n",
"    if($active) {\n",
"      statusWindow()->setFGColor(GREEN);\n",
"      statusWindow()->print(\" *ACTIVE*\\n\");\n",
"    } else {\n",
"      statusWindow()->setFGColor(RED);\n",
"      statusWindow()->print(\" *INACTIVE*\\n\");\n",
"    }\n",
"    statusWindow()->resetAttributes();\n",
"  }\n",
"  statusWindow()->print(\"\\n\");\n",
"}\n",
"\n",
"sub executeTriggers {\n",
"  my $line = shift;\n",
"\n",
"  foreach my $trigger (@triggers) {\n",
"    my ( $name, $desc, $subRef, $active ) = @$trigger;\n",
"    my $doBreak = undef;\n",
"    if($active) {\n",
"      ( $doBreak, $line ) = &$subRef($line);\n",
"    }\n",
"    if($doBreak || !(defined $line)) { last; }\n",
"  }\n",
"\n",
"  return $line;\n",
"}\n",
"\n",
"############################################################\n",
"# Alias functions\n",
"############################################################\n",
"sub addAlias {\n",
"  my ($name, $regExp, $toExp, $flag, $active) = @_;\n",
"\n",
"  if(scalar(@_) < 5) {\n",
"    $active = 1;\n",
"  }\n",
"\n",
"  my $subRef = undef;\n",
"  my $desc = \"$name: \\t\";\n",
"  if(ref $toExp ne \"CODE\") {\n",
"    $desc .= \"s/$regExp/$toExp/g\";\n",
"    $desc =~ s/\\n/\\\\n/g;\n",
"    $subRef = sub {\n",
"      $_ = shift;\n",
"      if(s/$regExp/$toExp/g) {\n",
"	return ( $flag, $_ );\n",
"      } else {\n",
"	return ( undef, $_ );\n",
"      }\n",
"    }\n",
"  } else {\n",
"    $desc .= \"/$regExp/ -> sub { ... }\";\n",
"    $desc =~ s/\\n/\\\\n/g;\n",
"    $subRef = sub {\n",
"      $_ = shift;\n",
"      if(/$regExp/) {\n",
"	$_ = &$toExp($_);\n",
"	return ( $flag, $_ );\n",
"      } else {\n",
"	return ( undef, $_ );\n",
"      }\n",
"    }\n",
"  }\n",
"\n",
"  #statusWindow()->print(\"Adding alias [ $desc ].\\n\");\n",
"  unshift(@aliases, [ $name, $desc, $subRef, $active ]);\n",
"}\n",
"\n",
"sub updateAlias {\n",
"  addAlias(@_);\n",
"  my $alias=shift @aliases;\n",
"\n",
"  my $count = 0;\n",
"  map { \n",
"    if($_->[0] eq $alias->[0]) {\n",
"      ++$count;\n",
"      $_->[1] = $alias->[1];\n",
"      $_->[2] = $alias->[2];\n",
"      $_->[3] = $alias->[3];\n",
"    }\n",
"  } @aliases;\n",
"\n",
"  if ($count==0) {\n",
"      unshift @aliases,$alias;\n",
"      ++$count;\n",
"  }\n",
"  #statusWindow()->print(\"Updated $count aliases.\\n\");\n",
"  return $count;\n",
"}\n",
"\n",
"sub delAlias {\n",
"  my $regExp = shift;\n",
"  my $l = $#aliases;\n",
"\n",
"  @aliases = grep { $_->[0] !~ /$regExp/ } @aliases;\n",
"\n",
"  my $diff = $l - $#aliases;\n",
"  #statusWindow()->print(\"Deleted $diff aliases.\\n\");\n",
"  return $diff;\n",
"}\n",
"\n",
"sub setAliasState {\n",
"  my ($regExp, $active) = @_;\n",
"  my $count = 0;\n",
"  map { \n",
"    if($_->[0] =~ /$regExp/) {\n",
"      ++$count;\n",
"      $_->[3] = $active;\n",
"    }\n",
"  } @aliases;\n",
"\n",
"  #statusWindow()->print(\"Changed the state of $count aliases.\\n\");\n",
"  return $count;\n",
"}\n",
"\n",
"sub listAliases {\n",
"  statusWindow()->setIntensive(1);\n",
"  statusWindow()->print(\"Alias list:\\n\");\n",
"  statusWindow()->setIntensive(0);\n",
"  foreach my $alias (@aliases) {\n",
"    my ( $name, $desc, $subRef, $active ) = @$alias;\n",
"\n",
"    statusWindow()->print($desc);\n",
"    if($active) {\n",
"      statusWindow()->setFGColor(GREEN);\n",
"      statusWindow()->print(\" *ACTIVE*\\n\");\n",
"    } else {\n",
"      statusWindow()->setFGColor(RED);\n",
"      statusWindow()->print(\" *INACTIVE*\\n\");\n",
"    }\n",
"    statusWindow()->resetAttributes();\n",
"  }\n",
"  statusWindow()->print(\"\\n\");\n",
"}\n",
"\n",
"sub executeAliases {\n",
"  my $text = shift;\n",
"\n",
"  foreach my $alias (@aliases) {\n",
"    my ( $name, $desc, $subRef, $active ) = @$alias;\n",
"    my $doBreak = undef;\n",
"    if($active) {\n",
"      ( $doBreak, $text ) = &$subRef($text);\n",
"    }\n",
"    if($doBreak or !defined $text) { last; }\n",
"  }\n",
"\n",
"  return $text;\n",
"}\n",
"\n",
"############################################################\n",
"# Key binding functions\n",
"############################################################\n",
"sub addKeyBinding {\n",
"  my ( $name, $onKey, $subRef, $active ) = @_;\n",
"\n",
"  if(scalar(@_) < 4) {\n",
"    $active = 1;\n",
"  }\n",
"\n",
"  my $desc = \"$name: /$onKey/\\t  -> \\t\";\n",
"  if(ref $subRef ne \"CODE\") {\n",
"    $desc .= \"\\\"\".$subRef.\"\\\"\";\n",
"    my $text = $subRef;\n",
"    $subRef = sub { wrap_onTextEntered($text); }\n",
"  } else {\n",
"    $desc .= \"sub { ... }\";\n",
"  }\n",
"  $desc =~ s/\\n/\\\\n/g;\n",
"\n",
"  #statusWindow()->print(\"Added key binding [ $desc ].\\n\");\n",
"  unshift(@keyBindings, [ $name, $desc, $onKey, $subRef, $active ]);\n",
"}\n",
"\n",
"sub delKeyBinding {\n",
"  my $regExp = shift;\n",
"  my $l = $#keyBindings;\n",
"\n",
"  @keyBindings = grep { $_->[0] !~ /$regExp/ } @keyBindings;\n",
"\n",
"  my $diff = $l - $#keyBindings;\n",
"  #statusWindow()->print(\"Deleted $diff keyBindings.\\n\");\n",
"  return $diff;\n",
"}\n",
"\n",
"sub setKeyBindingState {\n",
"  my ($regExp, $active) = @_;\n",
"  my $count = 0;\n",
"  map { \n",
"    if($_->[0] =~ /$regExp/) {\n",
"      ++$count;\n",
"      $_->[4] = $active;\n",
"    }\n",
"  } @keyBindings;\n",
"\n",
"  #statusWindow()->print(\"Changed the state of $count key bindings.\\n\");\n",
"  return $count;\n",
"}\n",
"\n",
"sub listKeyBindings {\n",
"  statusWindow()->setIntensive(1);\n",
"  statusWindow()->print(\"Key binding list:\\n\");\n",
"  statusWindow()->setIntensive(0);\n",
"  foreach my $keyBinding (@keyBindings) {\n",
"    my ( $name, $desc, $onKey, $subRef, $active ) = @$keyBinding;\n",
"\n",
"    statusWindow()->print($desc);\n",
"    if($active) {\n",
"      statusWindow()->setFGColor(GREEN);\n",
"      statusWindow()->print(\" *ACTIVE*\\n\");\n",
"    } else {\n",
"      statusWindow()->setFGColor(RED);\n",
"      statusWindow()->print(\" *INACTIVE*\\n\");\n",
"    }\n",
"    statusWindow()->resetAttributes();\n",
"  }\n",
"  statusWindow()->print(\"\\n\");\n",
"}\n",
"\n",
"sub executeKeyBindings {\n",
"  my $key = shift;\n",
"\n",
"  foreach my $keyBinding (@keyBindings) {\n",
"    my ( $name, $descr, $onKey, $subRef, $active ) = @$keyBinding;\n",
"    if($active && ($key =~ /$onKey/)) {\n",
"      &$subRef();\n",
"      return 1;\n",
"    }\n",
"  }\n",
"  return undef;\n",
"}\n",
"\n",
"############################################################\n",
"# Timer functions\n",
"############################################################\n",
"sub getTime {\n",
"  return $time;\n",
"}\n",
"\n",
"sub addTimer {\n",
"  my ( $name, $inc, $subRef, $active ) = @_;\n",
"\n",
"  if(scalar(@_) < 3 or !defined $name ) {\n",
"    #onHelp \"addTimer\" aufrufen!\n",
"    return;\n",
"  }\n",
"  if(scalar(@_) < 4) {\n",
"    $active = 1;\n",
"  }\n",
"\n",
"  my $desc = \"$name: +$inc\\t  -> \\t\";\n",
"  if(ref $subRef ne \"CODE\") {\n",
"    $desc .= \"\\\"\".$subRef.\"\\\"\";\n",
"    my $text = $subRef;\n",
"    $subRef = sub { wrap_onTextEntered($text); }\n",
"  } else {\n",
"    $desc .= \"sub { ... }\";\n",
"  }\n",
"  $desc =~ s/\\n/\\\\n/g;\n",
"\n",
"  #statusWindow()->print(\"Added timer [ $desc ].\\n\");\n",
"  unshift(@timers, [ $name, $desc, $inc, $subRef, $active, getTime() ]);\n",
"}\n",
"\n",
"sub delTimer {\n",
"  my $regExp = shift;\n",
"  my $l = $#timers;\n",
"\n",
"  @timers = grep { $_->[0] !~ /$regExp/ } @timers;\n",
"\n",
"  my $diff = $l - $#timers;\n",
"  #statusWindow()->print(\"Deleted $diff timers.\\n\");\n",
"  return $diff;\n",
"}\n",
"\n",
"sub setTimerState {\n",
"  my ($regExp, $active) = @_;\n",
"  my $count = 0;\n",
"  map {\n",
"    if($_->[0] =~ /$regExp/) {\n",
"      ++$count;\n",
"      $_->[4] = $active;\n",
"    }\n",
"  } @timers;\n",
"\n",
"  #statusWindow()->print(\"Changed the state of $count timers.\\n\");\n",
"  return $count;\n",
"}\n",
"\n",
"\n",
"sub setTimerInc {\n",
"  my ($regExp, $newInc) = @_;\n",
"  my $count = 0;\n",
"  map {\n",
"    if($_->[0] =~ /$regExp/) {\n",
"      ++$count;\n",
"      $_->[2] = $newInc;\n",
"    }\n",
"  } @timers;\n",
"\n",
"  #statusWindow()->print(\"Changed the increment of $count timers.\\n\");\n",
"  return $count;\n",
"}\n",
"\n",
"\n",
"sub listTimers {\n",
"  statusWindow()->setIntensive(1);\n",
"  statusWindow()->print(\"Timer list:\\n\");\n",
"  statusWindow()->setIntensive(0);\n",
"  foreach my $timer (@timers) {\n",
"    my ( $name, $desc, $inc, $subRef, $active, $lastrun ) = @$timer;\n",
"\n",
"    statusWindow()->print($desc);\n",
"    if($active) {\n",
"      statusWindow()->setFGColor(GREEN);\n",
"      statusWindow()->print(\" *ACTIVE*\\n\");\n",
"    } else {\n",
"      statusWindow()->setFGColor(RED);\n",
"      statusWindow()->print(\" *INACTIVE*\\n\");\n",
"    }\n",
"    statusWindow()->resetAttributes();\n",
"  }\n",
"  statusWindow()->print(\"\\n\");\n",
"}\n",
"\n",
"\n",
"############################################################\n",
"# Delay functions\n",
"############################################################\n",
"sub addDelayed {\n",
"  my ( $name, $delay, $subRef ) = @_;\n",
"  if(scalar(@_) < 3 or !defined $name ) {\n",
"    #onHelp \"addDelayed\" aufrufen!\n",
"    return;\n",
"  }\n",
"  my $desc = \"$name: \\t\";\n",
"  if(ref $subRef ne \"CODE\") {\n",
"    $desc .= \"\\\"\".$subRef.\"\\\"\";\n",
"    my $text = $subRef;\n",
"    $subRef = sub { wrap_onTextEntered($text); }\n",
"  } else {\n",
"    $desc .= \"sub { ... }\";\n",
"  }\n",
"\n",
"  $desc =~ s/\\n/\\\\n/g;\n",
"  #statusWindow()->print(\"Added timer [ $desc ].\\n\");\n",
"  unshift(@delayed, [ $name, $desc, $delay+getTime(), $subRef ]);\n",
"}\n",
"\n",
"sub delDelayed {\n",
"  my $regExp = shift;\n",
"  my $l = $#delayed;\n",
"\n",
"  @delayed = grep { $_->[0] !~ /$regExp/ } @delayed;\n",
"\n",
"  my $diff = $l - $#timers;\n",
"  #statusWindow()->print(\"Deleted $diff timers.\\n\");\n",
"  return $diff;\n",
"}\n",
"\n",
"sub setDelayed {\n",
"  my ($regExp,$delay)=@_;\n",
"  $delay+=getTime();\n",
"  my $count = 0;\n",
"  map {\n",
"    if($_->[0] =~ /$regExp/) {\n",
"      ++$count;\n",
"      $_->[2] = $delay;\n",
"    }\n",
"  } @delayed;\n",
"\n",
"  #statusWindow()->print(\"Changed the state of $count timers.\\n\");\n",
"  return $count;\n",
"}\n",
"\n",
"sub listDelayed {\n",
"  statusWindow()->setIntensive(1);\n",
"  statusWindow()->print(\"Delayed Action list:\\n\");\n",
"  statusWindow()->setIntensive(0);\n",
"  foreach my $timer (@delayed) {\n",
"    my ( $name, $desc, $run, $subRef ) = @$timer;\n",
"\n",
"    $run-=getTime();\n",
"    statusWindow()->print(\"$run\\t  -> \\t$desc\\n\");\n",
"  }\n",
"  statusWindow()->print(\"\\n\");\n",
"\n",
"}\n",
"\n",
"############################################################\n",
"# Misc functions\n",
"############################################################\n",
"\n",
"sub parse {\n",
"  my $fileName = shift;\n",
"  do $fileName;\n",
"  if($@) {\n",
"    XM::showError($@);\n",
"  }\n",
"  if ($!) {\n",
"    XM::showError($! . \" while parsing '$fileName'\");\n",
"  }\n",
"}\n",
"\n",
"sub help {\n",
"  if(ref $onHelp eq \"CODE\") {\n",
"    &$onHelp(@_);\n",
"  }\n",
"}\n",
"\n",
"my $layoutGenerator = new helplayout('plain');\n",
"sub layout {\n",
"  my ($node, $subHelpText) = @_;\n",
"  $layoutGenerator->setSubHelpText($subHelpText);\n",
"  return $layoutGenerator->generate($node);\n",
"}\n",
"\n",
"my $separator = \"::\";\n",
"$onHelp = sub {\n",
"  my ($topic) = @_;\n",
"  if((not defined $topic) || (ref $topic)) {\n",
"    $topic = '';\n",
"  }\n",
"  my $subHelpText = 'Use #help \"';\n",
"  if($topic ne '') {\n",
"    $subHelpText .= $topic . $separator;\n",
"  }\n",
"  $subHelpText .= '<subtopic>\" for help on a specific subtopic';\n",
"  if($topic eq '') {\n",
"    statusWindow()->print(layout($helpAll, $subHelpText));\n",
"    return;\n",
"  }\n",
"  my $search = $topic;\n",
"  my $finished = 0;\n",
"  my $node = $helpAll;\n",
"  my $found = 0;\n",
"  while(not $finished) {\n",
"    my $head;\n",
"    my $tail;\n",
"    if($search =~ /^(([^:]|(:[^:]))+)::(.*)$/) {\n",
"      $head = $1;\n",
"      $tail = $4;\n",
"    } else {\n",
"      $head = $search;\n",
"      $tail = \"\";\n",
"    }\n",
"    $found = 0;\n",
"    foreach my $child (@{ $node->getSubNodes() }) {\n",
"      if($child->hasAttribute('name') &&\n",
"	 $child->getAttribute('name') eq $head) {\n",
"	$search = $tail;\n",
"	$node = $child;\n",
"	if($tail eq '') {\n",
"	  my $helpMsg = layout($node, $subHelpText);\n",
"	  if($helpMsg ne \"\") {\n",
"	    $found = 1;\n",
"	    statusWindow()->print($helpMsg);\n",
"	  }\n",
"	  $finished = 1;\n",
"	} else {\n",
"	  $found = 1;\n",
"	}\n",
"	last;\n",
"      }\n",
"    }\n",
"    if(not $found) {\n",
"      $finished = 1;\n",
"    }\n",
"  }\n",
"  if(not $found) {\n",
"    statusWindow()->print(\"Couldn't find help on \\\"\" . $topic . \"\\\"\\n\");\n",
"  }\n",
"\n",
"  return;\n",
"};\n",
"\n",
"sub sysinitInitialize {\n",
"\n",
"  addAlias(\"LOCAL_ECHO\", qr/.?/, sub {\n",
"      my $text = shift;\n",
"      if($isEcho && defined $text) {\n",
"	  statusWindow()->setFGColor(CYAN);\n",
"	  statusWindow()->print(\"$text\\n\");\n",
"	  statusWindow()->resetAttributes();\n",
"      }\n",
"      return $text;\n",
"  });\n",
"\n",
"  addAlias(\"Eval\", qr/^\\#/, sub {\n",
"	     my $text = shift;\n",
"	     eval(substr($text, 1));\n",
"	     if($@) { XM::showError($@); }\n",
"	     return undef;\n",
"	   }, 1);\n",
"\n",
"\n",
"  addKeyBinding('Scroll-Up', '.000.... PgUp', sub {\n",
"    statusWindow()->scrollLines(-int(statusWindow()->getLines()/2));  return 1;\n",
"  });\n",
"  addKeyBinding('Scroll-Down', '.000.... PgDown', sub {\n",
"    statusWindow()->scrollLines(int(statusWindow()->getLines()/2));  return 1;\n",
"  });\n",
"\n",
"  statusWindow()->print(\"\n",
"\n",
"Welcome to xpertmud\n",
"*******************\n",
"\n",
"type \\\"#help\\\"\n",
"for further information.\n",
"\n",
"\");\n",
"}\n",
"\n",
"sub setLocalEcho {\n",
"    my $state=shift;\n",
"    setAliasState(qr/^LOCAL_ECHO$/,$state);\n",
"}\n",
"\n",
"$onTimer = sub {\n",
"  if($time == 0.0) {\n",
"    sysinitInitialize();\n",
"  }\n",
"  $time += 0.25;\n",
"\n",
"  foreach my $timer (@timers) {\n",
"    my ( $name, $descr, $inc, $subRef, $active, $lastCall ) = @$timer;\n",
"    if($active && ($lastCall+$inc < $time)) {\n",
"      $timer->[5] = $time;\n",
"      &$subRef();\n",
"    }\n",
"  }\n",
"  foreach my $delayed (@delayed) {\n",
"    my ($name, $desc, $delay, $subRef) = @$delayed;\n",
"    if ($delay <= $time) {\n",
"      &$subRef();\n",
"    }\n",
"  }\n",
"# Delete in second step, so that a delayed function could reset\n",
"# itself or another delayed to a new time\n",
"  @delayed=grep { $_->[2] > $time } @delayed;\n",
"};\n",
"\n",
"$onTextEntered=sub {\n",
"  my $text = shift;\n",
"\n",
"  if(ref $aliasPreprocessing eq \"CODE\") {\n",
"    $text = &$aliasPreprocessing($text);\n",
"  }\n",
"\n",
"  $text = executeAliases($text);\n",
"\n",
"  if(defined $text) {\n",
"    sendText($text.\"\\r\\n\");\n",
"  }\n",
"};\n",
"\n",
"$onKeyPressed =sub {\n",
"  my $key = shift;\n",
"  my $ascii = shift;\n",
"\n",
"  if(ref $keyPreprocessing eq \"CODE\") {\n",
"    ( $key, $ascii ) = &$keyPreprocessing($key, $ascii);\n",
"  }\n",
"\n",
"  if(defined $key) {\n",
"    if(executeKeyBindings($key)) {\n",
"      return 1;\n",
"    }\n",
"\n",
"    if($isEcho) {\n",
"      return undef;\n",
"    } else {\n",
"#      print ord($ascii) if defined $ascii;\n",
"      sendKey($key, $ascii);\n",
"      return 1;\n",
"    }\n",
"  }\n",
"\n",
"  return undef;\n",
"};\n",
"\n",
"$onConnectionEstablished = sub {\n",
"  my $id = shift;\n",
"  statusWindow()->print(\"Connection $id established.\\n\");\n",
"};\n",
"\n",
"$onConnectionDropped = sub {\n",
"  my $id = shift;\n",
"  statusWindow()->print(\"Connection $id dropped.\\n\");\n",
"};\n",
"\n",
"sub setWriteRegExps {\n",
"  $writeAtOnceRegExp = shift || $writeAtOnceRegExp;\n",
"  $dontWriteAtOnceRegExp = shift || $dontWriteAtOnceRegExp;\n",
"}\n",
"\n",
"sub resetWriteRegExps {\n",
"  $writeAtOnceRegExp = \".?\";\n",
"  $dontWriteAtOnceRegExp = \"^\\$\";\n",
"}\n",
"\n",
"my $linePart = \"\";\n",
"resetWriteRegExps();\n",
"$onTextReceived = sub {\n",
"  my $text=shift;\n",
"  my $id = shift;\n",
"\n",
"  if(ref $triggerPreprocessing eq \"CODE\") {\n",
"    $text = &$triggerPreprocessing($text);\n",
"  }\n",
"\n",
"  if (defined $text) {\n",
"    foreach my $line (split /(?<=\\n)/, $linePart.$text) {\n",
"      $linePart = \"\";\n",
"      if($line =~ s/\\r?\\n$/\\n/) {\n",
"	if(ref $onLineReceived eq \"CODE\") {\n",
"	  $line = &$onLineReceived($line);\n",
"	}\n",
"	$line = executeTriggers($line);\n",
"	if(defined $line && $line ne \"\") {\n",
"	  statusWindow()->print($line);\n",
"	}\n",
"\n",
"      } else {\n",
"	if(($line =~ /$writeAtOnceRegExp/) &&\n",
"	   ($line !~ /$dontWriteAtOnceRegExp/)) {\n",
"\n",
"	  $line = executeTriggers($line);\n",
"	  if(defined $line && $line ne \"\") {\n",
"	    statusWindow()->print($line);\n",
"	  }\n",
"\n",
"	} else {\n",
"	  $linePart = $line;\n",
"	}\n",
"      }\n",
"    }\n",
"  }\n",
"};\n",
"\n",
"$onEcho = sub {\n",
"  my $state = shift;\n",
"  my $id = shift;\n",
"\n",
"  $isEcho = $state;\n",
"  XM::echoMode($state);\n",
"};\n",
"\n",
"sub wrap_onEcho {\n",
"  if (ref $onEcho eq 'CODE') {\n",
"    eval {\n",
"      &$onEcho(@_);\n",
"    };\n",
"    XM::showError($@) if $@;\n",
"  }\n",
"}\n",
"\n",
"sub wrap_onTextEntered {\n",
"  if (ref $onTextEntered eq 'CODE') {\n",
"    eval {\n",
"      &$onTextEntered(@_);\n",
"    };\n",
"    XM::showError($@) if $@;\n",
"  }\n",
"}\n",
"\n",
"sub wrap_onTimer {\n",
"  if (ref $onTimer eq 'CODE') {\n",
"    eval {\n",
"      &$onTimer(@_);\n",
"    };\n",
"    XM::showError($@) if $@;\n",
"  }\n",
"}\n",
"\n",
"sub wrap_onKeyPressed {\n",
"  if (ref $onKeyPressed eq 'CODE') {\n",
"    my $res;\n",
"    eval {\n",
"      $res = !!&$onKeyPressed(@_);\n",
"    };\n",
"    XM::showError($@) if $@;\n",
"    return $res;\n",
"  }\n",
"  return 0;\n",
"}\n",
"\n",
"sub wrap_onTextReceived {\n",
"  if (ref $onTextReceived eq 'CODE') {\n",
"    eval {\n",
"      &$onTextReceived(@_);\n",
"    };\n",
"    XM::showError($@) if $@;\n",
"  }\n",
"}\n",
"\n",
"sub wrap_onConnectionEstablished {\n",
"  if (ref $onConnectionEstablished eq 'CODE') {\n",
"    eval {\n",
"      &$onConnectionEstablished(@_);\n",
"    };\n",
"    XM::showError($@) if $@;\n",
"  }\n",
"}\n",
"\n",
"sub wrap_onConnectionDropped {\n",
"  if (ref $onConnectionDropped eq 'CODE') {\n",
"    eval {\n",
"      &$onConnectionDropped(@_);\n",
"    };\n",
"    XM::showError($@) if $@;\n",
"  }\n",
"}\n",
"\n",
"sub wrap_mouseDown {\n",
"  my ($id,$x,$y)=@_;\n",
"#  print \"mouseDown on win $id, at ($x,$y)\\n\";\n",
"  my $win=XMWindow::get($id);\n",
"  if (defined $win and $win->isa(\"XMTextWindow\")) {\n",
"    my $mdloop = $win->{_MOUSE_DOWN} || [];\n",
"    foreach my $funcRef (@{ $mdloop }) {\n",
"      eval {\n",
"	&$funcRef($win, $x, $y);\n",
"      };\n",
"      XM::showError($@) if $@;\n",
"    }\n",
"  }\n",
"}\n",
"\n",
"sub wrap_mouseDrag {\n",
"  my ($id,$x,$y)=@_;\n",
"  #print \"mouseDrag on win $id, at ($x,$y)\\n\";\n",
"  my $win=XMWindow::get($id);\n",
"  if (defined $win and $win->isa(\"XMTextWindow\")) {\n",
"    my $mdloop = $win->{_MOUSE_DRAG} || [];\n",
"    foreach my $funcRef (@{ $mdloop }) {\n",
"      eval {\n",
"	&$funcRef($win, $x, $y);\n",
"      };\n",
"      XM::showError($@) if $@;\n",
"    }\n",
"  }\n",
"}\n",
"\n",
"sub wrap_mouseUp {\n",
"  my ($id,$x,$y)=@_;\n",
"  #print \"mouseUp on win $id, at ($x,$y)\\n\";\n",
"  my $win=XMWindow::get($id);\n",
"  if (defined $win and $win->isa(\"XMTextWindow\")) {\n",
"    my $mdloop = $win->{_MOUSE_UP} || [];\n",
"    foreach my $funcRef (@{ $mdloop }) {\n",
"      eval {\n",
"	&$funcRef($win, $x, $y);\n",
"      };\n",
"      XM::showError($@) if $@;\n",
"    }\n",
"  }\n",
"}\n",
"\n",
"sub wrap_pluginCall {\n",
"  my ($id,$function,$args)=@_;\n",
"  my $win=XMWindow::get($id);\n",
"  if (defined $win and $win->isa(\"XMPlugin\")) {\n",
"    my $result;\n",
"    eval {\n",
"      $result=$win->function($function,$args);\n",
"    };\n",
"    XM::showError($@) if $@;\n",
"    return $result;\n",
"  }\n",
"  warn \"PluginCall on invalid window\";\n",
"  return 42;\n",
"}\n",
"\n",
"sub sendKey {\n",
"  my $key = shift;\n",
"  my $ascii = shift;\n",
"  if ($key =~ /KP_Enter/ or $key =~ /Return/) {\n",
"    sendText(\"\\n\");\n",
"  } elsif(defined $ascii && $ascii =~ /^.$/) {\n",
"    sendText(\"$ascii\");\n",
"  }\n",
"}\n",
"\n",
"# include here, else we need to put all the above\n",
"# stuff into a package, which we don't want to...\n",
"package XMXmlNode;\n",
"use strict;\n",
"use warnings;\n",
"use diagnostics;\n",
"\n",
"sub new {\n",
"  my ($this, $tagName, $dtd) = @_;\n",
"  my $class = ref($this) || $this;\n",
"\n",
"  my $object = {\n",
"		childs => [],\n",
"		attributes => {},\n",
"		tagName => $tagName\n",
"	       };\n",
"  my $self = bless $object, $class;\n",
"\n",
"  if(ref $dtd) {\n",
"    my $tag = $dtd->getTag($self->{tagName});\n",
"    foreach my $defaultAttr (@{ $tag->getDefaultAttributes() }) {\n",
"      $self->setAttribute($defaultAttr, $tag->getDefault($defaultAttr));\n",
"    }\n",
"  }\n",
"\n",
"  return $self;\n",
"}\n",
"\n",
"sub setAttribute {\n",
"  my ($self, $aname, $value) = @_;\n",
"  $self->{attributes}->{$aname} = $value;\n",
"}\n",
"\n",
"sub getAttribute {\n",
"  my ($self, $name) = @_;\n",
"  return $self->{attributes}->{$name};\n",
"}\n",
"\n",
"sub hasAttribute {\n",
"  my ($self, $name) = @_;\n",
"  return exists $self->{attributes}->{$name};\n",
"}\n",
"\n",
"sub getChildTagNames {\n",
"  my ($self) = @_;\n",
"  my $ret = [];\n",
"  foreach my $child (@{ $self->{childs} }) {\n",
"    my $childTagName = undef;\n",
"    if(ref $child) {\n",
"      $childTagName = $child->getTagName();\n",
"    }\n",
"    if((ref $child) && (not grep(/$childTagName/, @$ret))) {\n",
"      push(@$ret, $child->getTagName());\n",
"    }\n",
"  }\n",
"  return $ret;\n",
"}\n",
"\n",
"sub removeChild {\n",
"  my ($self, $child) = @_;\n",
"  for(my $i=0; $i<scalar(@{ $self->{childs} }); ++$i) {\n",
"    my $inchild = $self->{childs}->[$i];\n",
"    while($i<scalar(@{ $self->{childs} }) &&\n",
"	  (ref $child && ref $inchild && $child == $inchild) ||\n",
"	  (not ref $child && not ref $inchild && $child eq $inchild)) {\n",
"      splice(@{ $self->{childs} }, $i);\n",
"    }\n",
"  }\n",
"}\n",
"\n",
"sub addChild {\n",
"  my ($self, $child) = @_;\n",
"  if((not ref $child) && ($child eq \"\")) {\n",
"    return;\n",
"  }\n",
"\n",
"  my $childNum = scalar(@{ $self->{childs} });\n",
"  if((not ref $child) && ($childNum > 0) &&\n",
"     (not ref $self->{childs}->[$childNum-1])) {\n",
"    $self->{childs}->[$childNum-1] .= $child;\n",
"    return;\n",
"  }\n",
"\n",
"  push(@{ $self->{childs} }, $child);\n",
"}\n",
"\n",
"sub getChilds {\n",
"  my ($self) = @_;\n",
"  return $self->{childs};\n",
"}\n",
"\n",
"sub getSubNodes {\n",
"  my ($self, $name) = @_;\n",
"  $name = $name || \"\";\n",
"  my $ret = [];\n",
"  foreach my $child (@{ $self->{childs} }) {\n",
"    if((ref $child) && \n",
"       (($name eq \"\") || ($name eq $child->getTagName()))) {\n",
"      push(@$ret, $child);\n",
"    }\n",
"  }\n",
"  return $ret;\n",
"}\n",
"\n",
"sub getTagName {\n",
"  my ($self) = @_;\n",
"  return $self->{tagName};\n",
"}\n",
"\n",
"sub escape {\n",
"  my ($self, $s) = @_;\n",
"  my $ret = \"\";\n",
"  for(my $i=0; $i<length($s); ++$i) {\n",
"    my $char = substr($s, $i, 1);\n",
"    if(ord($char) <= 6 || ord($char) > 255) {\n",
"      $ret .= \"&#\" . ord($char) . \";\";\n",
"    }\n",
"    elsif($char eq \"&\") {\n",
"      $ret .= \"&amp;\";\n",
"    }\n",
"    elsif($char eq \"<\") {\n",
"      $ret .= \"&lt;\";\n",
"    }\n",
"    elsif($char eq \">\") {\n",
"      $ret .= \"&gt;\";\n",
"    }\n",
"    elsif($char eq \"\\\"\") {\n",
"      $ret .= \"&quot;\";\n",
"    }\n",
"    else {\n",
"      $ret .= $char;\n",
"    }\n",
"  }\n",
"  return $ret;\n",
"}\n",
"\n",
"sub toString {\n",
"  my ($self, $indent) = @_;\n",
"  $indent = $indent || \"\";\n",
"  my $s = \"<\" . $self->getTagName();\n",
"  foreach my $attr (keys %{ $self->{attributes} }) {\n",
"    $s .= ' ' . $attr . '=\"' .\n",
"      $self->escape($self->{attributes}->{$attr}) . '\"';\n",
"  }\n",
"\n",
"  if(scalar(@{ $self->{childs} }) > 0) {\n",
"    $s .= \">\";\n",
"    foreach my $child(@{ $self->{childs} }) {\n",
"      if(not ref $child) {\n",
"	$s .= $self->escape($child);\n",
"      } else {\n",
"	$s .= $child->toString($indent . \" \");\n",
"      }\n",
"    }\n",
"    $s .= \"</\" . $self->getTagName() . \">\";\n",
"  } else {\n",
"    $s .= \"/>\";\n",
"  }\n",
"\n",
"  return $s;\n",
"}\n",
"\n",
"package XMXmlDTDTag;\n",
"use strict;\n",
"use warnings;\n",
"use diagnostics;\n",
"\n",
"sub new {\n",
"  my ($this, $name) = @_;\n",
"  my $class = ref($this) || $this;\n",
"\n",
"  my $object = {\n",
"		attributes => {},\n",
"		name => $name\n",
"	       };\n",
"  my $self = bless $object, $class;\n",
"  return $self;\n",
"}\n",
"\n",
"sub addAttribute {\n",
"  my ($self, $name, $value) = @_;\n",
"  if(not grep(/$name/, keys %{ $self->{attributes} })) {\n",
"    $self->{attributes}->{$name} = [];\n",
"  }\n",
"  push(@{ $self->{attributes}->{$name} }, $value);\n",
"}\n",
"\n",
"sub getDefault {\n",
"  my ($self, $name) = @_;\n",
"  if(not grep(/$name/, keys %{ $self->{attributes} })) {\n",
"    return \"\";\n",
"  }\n",
"  return $self->{attributes}->{$name}->[0];\n",
"}\n",
"\n",
"sub getDefaultAttributes {\n",
"  my ($self) = @_;\n",
"  return [ keys %{ $self->{attributes} } ];\n",
"}\n",
"\n",
"sub getName {\n",
"  my ($self) = @_;\n",
"  return $self->{name};\n",
"}\n",
"\n",
"package XMXmlDTD;\n",
"use strict;\n",
"use warnings;\n",
"use diagnostics;\n",
"\n",
"sub new {\n",
"  my ($this) = @_;\n",
"  my $class = ref($this) || $this;\n",
"\n",
"  my $object = {\n",
"		tags => {}\n",
"	       };\n",
"  my $self = bless $object, $class;\n",
"  return $self;\n",
"}\n",
"\n",
"sub addTag {\n",
"  my ($self, $tag) = @_;\n",
"  $self->{tags}->{$tag->getName()} = $tag;\n",
"}\n",
"\n",
"sub getTag {\n",
"  my ($self, $name) = @_;\n",
"  if(not grep(/$name/, keys %{ $self->{tags} })) {\n",
"    my $ret = new XMXmlDTDTag($name);\n",
"    return $ret;\n",
"  }\n",
"  return $self->{tags}->{$name};\n",
"}\n",
"\n",
"# pseudo xml parser\n",
"package XMXmlParser;\n",
"use strict;\n",
"use warnings;\n",
"use diagnostics;\n",
"\n",
"use vars qw/$inWordExtra $startWord/;\n",
"\n",
"sub new {\n",
"  $inWordExtra = q/[0-9]/;\n",
"  $startWord = q/[a-zA-Z]/;\n",
"  my ($this, $dtd) = @_;\n",
"  my $class = ref($this) || $this;\n",
"\n",
"  my $object = {\n",
"		state => \"parsechild\",\n",
"		wasspace => 0,\n",
"		stack => [ new XMXmlNode(\"document\") ],\n",
"		lineno => 1,\n",
"		column => 1,\n",
"		attr => \"\",\n",
"		buffer => \"\",\n",
"		closing => 0,\n",
"		dtd => $dtd\n",
"	       };\n",
"  my $self = bless $object, $class;\n",
"  return $self;\n",
"}\n",
"\n",
"sub entity {\n",
"  my ($self, $name) = @_;\n",
"  if($name eq \"amp\") {\n",
"    return \"&\";\n",
"  }\n",
"  elsif($name eq \"lt\") {\n",
"    return \"<\";\n",
"  }\n",
"  elsif($name eq \"gt\") {\n",
"    return \">\";\n",
"  }\n",
"  elsif($name eq \"quot\") {\n",
"    return '\"';\n",
"  }\n",
"  elsif(length($name) > 0 && substr($name, 0, 1) eq \"#\") {\n",
"    return chr(substr($name, 1));\n",
"  }\n",
"  return \"\";\n",
"}\n",
"\n",
"sub isSpace {\n",
"  my ($self, $char) = @_;\n",
"  return ($char eq \" \" || $char eq \"\\t\" ||\n",
"	  $char eq \"\\n\" || $char eq \"\\r\");\n",
"}\n",
"\n",
"sub isSlash {\n",
"  my ($self, $char) = @_;\n",
"  return $char eq \"/\";\n",
"}\n",
"\n",
"sub isLeft {\n",
"  my ($self, $char) = @_;\n",
"  return $char eq \"<\";\n",
"}\n",
"\n",
"sub isRight {\n",
"  my ($self, $char) = @_;\n",
"  return $char eq \">\";\n",
"}\n",
"\n",
"sub isEq {\n",
"  my ($self, $char) = @_;\n",
"  return $char eq \"=\";\n",
"}\n",
"\n",
"sub isQuote {\n",
"  my ($self, $char) = @_;\n",
"  return $char eq \"\\\"\";\n",
"}\n",
"\n",
"sub isAmp {\n",
"  my ($self, $char) = @_;\n",
"  return $char eq \"&\";\n",
"}\n",
"\n",
"sub isSemicolon {\n",
"  my ($self, $char) = @_;\n",
"  return $char eq \";\";\n",
"}\n",
"\n",
"sub allowedName {\n",
"  my ($self, $char, $position) = @_;\n",
"  return $char =~ /$startWord/ ||\n",
"    ($position > 0 && $char =~ /$inWordExtra/);\n",
"}\n",
"\n",
"sub error {\n",
"  my ($self, $description) = @_;\n",
"  my $s = \"\";\n",
"  if(defined $self->{file} && $self->{file} ne \"\") {\n",
"    $s .= $self->{file} . \": \";\n",
"  }\n",
"  $s .= \"(\".$self->{lineno}.\", \".$self->{column}.\") - \".$description;\n",
"  die $s;\n",
"}\n",
"\n",
"sub parseChild {\n",
"  my ($self, $char) = @_;\n",
"  if($self->isLeft($char)) {\n",
"    if($self->{wasspace}) {\n",
"      $self->{buffer} .= ' ';\n",
"    }\n",
"    $self->{stack}->[scalar(@{ $self->{stack} })-1]->addChild($self->{buffer});\n",
"    $self->{buffer} = \"\";\n",
"    $self->{closing} = 0;\n",
"    $self->{state} = \"tagname\";\n",
"  } elsif($self->isAmp($char)) {\n",
"    $self->{entityname} = \"\";\n",
"    $self->{laststate} = \"parsechild\";\n",
"    $self->{state} = \"entityname\";\n",
"  } else {\n",
"    my $curnode = $self->{stack}->[scalar(@{ $self->{stack} })-1];\n",
"    if($curnode->hasAttribute('xml:space') &&\n",
"       $curnode->getAttribute('xml:space') eq \"preserve\") {\n",
"      $self->{buffer} .= $char;\n",
"    } else {\n",
"      if($self->isSpace($char)) {\n",
"	if(length($self->{buffer}) > 0 ||\n",
"	   scalar(@{ $curnode->getChilds() }) > 0) {\n",
"	  $self->{wasspace} = 1;\n",
"	}\n",
"      } else {\n",
"	if($self->{wasspace}) {\n",
"	  $self->{buffer} .= \" \";\n",
"	  $self->{wasspace} = 0;\n",
"	}\n",
"	$self->{buffer} .= $char;\n",
"      }\n",
"    }\n",
"  }\n",
"}\n",
"\n",
"sub tagName {\n",
"  my ($self, $char) = @_;\n",
"  if((!$self->{closing} &&\n",
"      $self->isSpace($char)) || $self->isRight($char)) {\n",
"    if(length($self->{buffer}) > 0) {\n",
"      if($self->{closing}) {\n",
"	if($self->{stack}->[scalar(@{ $self->{stack} })-1]->getTagName() ne\n",
"	   $self->{buffer}) {\n",
"	  $self->error(\"Closing tag mismatch\");\n",
"	}\n",
"	if(scalar($self->{stack}) == 0) {\n",
"	  $self->error(\"You mustn't close the document tag\");\n",
"	} else {\n",
"	  pop(@{ $self->{stack} });\n",
"	}\n",
"      } else {\n",
"	my $node = new XMXmlNode($self->{buffer}, $self->{dtd});\n",
"	$self->{stack}->[scalar(@{ $self->{stack} })-1]->addChild($node);\n",
"	push(@{ $self->{stack} }, $node);\n",
"      }\n",
"      $self->{buffer} = \"\";\n",
"      $self->{wasspace} = 0;\n",
"      if($self->isSpace($char)) {\n",
"	$self->{state} = \"waitforattr\";\n",
"      } else {\n",
"	$self->{state} = \"parsechild\";\n",
"      }\n",
"    } else {\n",
"      $self->error(\"Need tag name after <\");\n",
"    }\n",
"  } elsif($self->isSlash($char) and length($self->{buffer}) == 0) {\n",
"    $self->{closing} = 1;\n",
"  } elsif($self->allowedName($char, length($self->{buffer}))) {\n",
"    $self->{buffer} .= $char;\n",
"  } else {\n",
"    $self->error(\"Character not allowed in tag name\");\n",
"  }\n",
"}\n",
"\n",
"sub waitForAttr {\n",
"  my ($self, $char) = @_;\n",
"  if($self->allowedName($char, 0)) {\n",
"    $self->{buffer} .= $char;\n",
"    $self->{state} = \"attrname\";\n",
"  } elsif($self->isRight($char)) {\n",
"    $self->{state} = \"parsechild\";\n",
"  } elsif($self->isSlash($char)) {\n",
"    $self->{state} = \"nochild\";\n",
"  } elsif(!$self->isSpace($char)) {\n",
"    $self->error(\"Character not allowed at beginning of attribute name\");\n",
"  }\n",
"}\n",
"\n",
"sub noChild {\n",
"  my ($self, $char) = @_;\n",
"  if($self->isRight($char)) {\n",
"    pop(@{ $self->{stack} });\n",
"    $self->{state} = \"parsechild\";\n",
"  } else {\n",
"    $self->error(\"> expected after / in tag\");\n",
"  }\n",
"}\n",
"\n",
"sub attrName {\n",
"  my ($self, $char) = @_;\n",
"  if($self->allowedName($char, 1)) {\n",
"    $self->{buffer} .= $char;\n",
"  } elsif($self->isSpace($char)) {\n",
"    $self->{attr} = $self->{buffer};\n",
"    $self->{buffer} = \"\";\n",
"    $self->{state} = \"waitforeq\";\n",
"  } elsif($self->isEq($char)) {\n",
"    $self->{attr} = $self->{buffer};\n",
"    $self->{buffer} = \"\";\n",
"    $self->{state} = \"waitforvalue\";\n",
"  } else {\n",
"    $self->error(\"Character not allowed in attribute name\");\n",
"  }\n",
"}\n",
"\n",
"sub waitForEq {\n",
"  my ($self, $char) = @_;\n",
"  if($self->isEq($char)) {\n",
"    $self->{state} = \"waitforvalue\";\n",
"  } elsif(!$self->isSpace($char)) {\n",
"    $self->error(\"= expected\");\n",
"  }\n",
"}\n",
"\n",
"sub waitForValue {\n",
"  my ($self, $char) = @_;\n",
"  if($self->isQuote($char)) {\n",
"    $self->{state} = \"attrvalue\";\n",
"  } elsif(!$self->isSpace($char)) {\n",
"    $self->error(\"\\\" expected\");\n",
"  }\n",
"}\n",
"\n",
"sub attrValue {\n",
"  my ($self, $char) = @_;\n",
"  if($self->isQuote($char)) {\n",
"    $self->{stack}->[scalar(@{ $self->{stack} })-1]->setAttribute\n",
"      ($self->{attr}, $self->{buffer});\n",
"    $self->{buffer} = \"\";\n",
"    $self->{state} = \"waitforattr\";\n",
"  } elsif($self->isAmp($char)) {\n",
"    $self->{entityname} = \"\";\n",
"    $self->{laststate} = \"attrvalue\";\n",
"    $self->{state} = \"entityname\";\n",
"  } else {\n",
"    $self->{buffer} .= $char;\n",
"  }\n",
"}\n",
"\n",
"sub entityName {\n",
"  my ($self, $char) = @_;\n",
"  if($self->isSemicolon($char)) {\n",
"    $self->{buffer} .= $self->entity($self->{entityname});\n",
"    $self->{state} = $self->{laststate};\n",
"  } else {\n",
"    $self->{entityname} .= $char;\n",
"  }\n",
"}\n",
"\n",
"sub parse {\n",
"  my ($self, $chunk) = @_;\n",
"  for(my $i=0; $i<length($chunk); ++$i) {\n",
"    my $char = substr($chunk, $i, 1);\n",
"    if($self->{lineno} == 1) {\n",
"      ;\n",
"    } elsif($self->{state} eq \"tagname\") {\n",
"      $self->tagName($char);\n",
"    } elsif($self->{state} eq \"waitforattr\") {\n",
"      $self->waitForAttr($char);\n",
"    } elsif($self->{state} eq \"attrname\") {\n",
"      $self->attrName($char);\n",
"    } elsif($self->{state} eq \"waitforeq\") {\n",
"      $self->waitForEq($char);\n",
"    } elsif($self->{state} eq \"waitforvalue\") {\n",
"      $self->waitForValue($char);\n",
"    } elsif($self->{state} eq \"attrvalue\") {\n",
"      $self->attrValue($char);\n",
"    } elsif($self->{state} eq \"parsechild\") {\n",
"      $self->parseChild($char);\n",
"    } elsif($self->{state} eq \"nochild\") {\n",
"      $self->noChild($char);\n",
"    } elsif($self->{state} eq \"entityname\") {\n",
"      $self->entityName($char);\n",
"    } else {\n",
"      $self->error(\"Invliad state: \\\"\".$self->{state}.\"\\\"\");\n",
"    }\n",
"\n",
"    $self->{column} += 1;\n",
"    if($char eq \"\\n\") {\n",
"      $self->{lineno} += 1;\n",
"      $self->{column} = 1;\n",
"    }\n",
"  }\n",
"}\n",
"\n",
"sub finish {\n",
"  my ($self) = @_;\n",
"  $self->{state} = \"parsechild\";\n",
"  $self->{wasspace} = 0;\n",
"  $self->{lineno} = 1;\n",
"  $self->{column} = 1;\n",
"  $self->{attr} = \"\";\n",
"  $self->{buffer} = \"\";\n",
"  $self->{closing} = 0;\n",
"}\n",
"\n",
"sub getNodes {\n",
"  my ($self) = @_;\n",
"  return $self->{stack}->[0]->getSubNodes();\n",
"}\n",
"\n",
"sub parseFile {\n",
"  my ($self, $file) = @_;\n",
"  open(PFILE, \"<$file\");\n",
"  while(my $line = <PFILE>) {\n",
"    $self->parse($line);\n",
"  }\n",
"}\n",
"\n",
"1;\n",
"package AnsiColorTranslator;\n",
"use strict;\n",
"use warnings;\n",
"use diagnostics;\n",
"\n",
"sub new {\n",
"  my ($this) = @_;\n",
"  my $class = ref($this) || $this;\n",
"\n",
"  my $object = {\n",
"		codes => {\n",
"     'r' => \"\\n\", 'cf' => \"\\x1b[5m\", 'ci' => \"\\x1b[7m\",\n",
"     'ch' => \"\\x1b[1m\", 'cn' => \"\\x1b[0m\", 'cu' => \"\\x1b[4m\", 'cx' => \"\\x1b[30m\",\n",
"     'cr' => \"\\x1b[31m\", 'cg' => \"\\x1b[32m\", 'cy' => \"\\x1b[33m\", 'cb' => \"\\x1b[34m\",\n",
"     'cm' => \"\\x1b[35m\", 'cc' => \"\\x1b[36m\", 'cw' => \"\\x1b[37m\", 'cX' => \"\\x1b[40m\",\n",
"     'cR' => \"\\x1b[41m\", 'cG' => \"\\x1b[42m\", 'cY' => \"\\x1b[43m\", 'cB' => \"\\x1b[44m\",\n",
"     'cM' => \"\\x1b[45m\", 'cC' => \"\\x1b[46m\", 'cW' => \"\\x1b[47m\"\n",
"			 },\n",
"		deliminator => '%'\n",
"	       };\n",
"  my $self = bless $object, $class;\n",
"\n",
"  return $self;\n",
"}\n",
"\n",
"sub getKeys {\n",
"  my ($self) = @_;\n",
"  return keys %{ $self->{codes} };\n",
"}\n",
"\n",
"sub getCode {\n",
"  my ($self, $key) = @_;\n",
"  return $self->{codes}->{$key};\n",
"}\n",
"\n",
"sub end {\n",
"  my ($self) = @_;\n",
"  return \"\\x1b[0m\";\n",
"}\n",
"\n",
"\n",
"1;\n",
"\n",
"package helpdtd;\n",
"use strict;\n",
"use warnings;\n",
"use diagnostics;\n",
"\n",
"use vars qw/@ISA/;\n",
"\n",
"sub new {\n",
"  @ISA = qw/XMXmlDTD/;\n",
"\n",
"  my ($this) = @_;\n",
"  my $class = ref($this) || $this;\n",
"\n",
"  my $self = new XMXmlDTD();\n",
"  return undef unless defined $self;\n",
"  $self = bless $self, $class;\n",
"\n",
"  my $example = new XMXmlDTDTag('example');\n",
"  $example->addAttribute('xml:space', 'preserve');\n",
"  $self->addTag($example);\n",
"\n",
"  my $code = new XMXmlDTDTag('code');\n",
"  $code->addAttribute('xml:space', 'preserve');\n",
"  $self->addTag($code);\n",
"\n",
"  foreach my $langId (\"py\", \"ru\", \"pe\") {\n",
"    my $idtag = new XMXmlDTDTag($langId);\n",
"    $idtag->addAttribute('xml:space', 'preserve');\n",
"    $self->addTag($idtag);\n",
"  }\n",
"  return $self;\n",
"}\n",
"\n",
"package helplayout;\n",
"use strict;\n",
"use warnings;\n",
"use diagnostics;\n",
"\n",
"use vars qw/$ansi/;\n",
"\n",
"sub new {\n",
"  if(not defined $ansi) {\n",
"    $ansi = new AnsiColorTranslator();\n",
"  }\n",
"  my ($this, $mode) = @_;\n",
"  my $class = ref($this) || $this;\n",
"\n",
"  my $object = {\n",
"		lang => \"perl\",\n",
"		Lang => \"Perl\",\n",
"		langID => \"pe\",\n",
"		allIDs => [ \"py\", \"ru\", \"pe\" ],\n",
"		mode => $mode,\n",
"		plainHeadingColor => $ansi->getCode('cb').$ansi->getCode('ch'),\n",
"		plainUnderlineColor => $ansi->getCode('cb'),\n",
"		plainSectionColor => $ansi->getCode('cc'),\n",
"		plainArgColor => $ansi->getCode('cr').$ansi->getCode('ch'),\n",
"		plainCodeColor => $ansi->getCode('cx').$ansi->getCode('ch'),\n",
"		plainSpace => 1,\n",
"		subHelpText => \"\"\n",
"	       };\n",
"  my $self = bless $object, $class;\n",
"\n",
"  return $self;\n",
"}\n",
"\n",
"sub setSubHelpText {\n",
"  my ($self, $text) = @_;\n",
"  $self->{subHelpText} = $text;\n",
"}\n",
"\n",
"sub escapeId {\n",
"  my ($self, $string) = @_;\n",
"  my $ret = $string;\n",
"  if($self->{mode} eq \"docbook\") {\n",
"    $ret =~ s/ /_/g;\n",
"    $ret =~ s/#/Sharp/g;\n",
"    $ret =~ s/%/Percent/g;\n",
"  }\n",
"  return $ret;\n",
"}\n",
"\n",
"sub outputSynopsis {\n",
"  my ($self, $node) = @_;\n",
"  my $synopsis = \"\";\n",
"  if($self->{mode} eq \"docbook\") {\n",
"    $synopsis .= \"<para><programlisting>\";\n",
"    $synopsis .= \"Synopsis: \".$node->getAttribute('name').\"(\";\n",
"  } elsif($self->{mode} eq \"plain\") {\n",
"    $synopsis .= $self->{plainSectionColor};\n",
"    $synopsis .= \"Synopsis:\".$ansi->end().\" \".\n",
"      $self->{plainCodeColor}.$node->getAttribute('name').\"(\";\n",
"  }\n",
"\n",
"  foreach my $arg (@{ $node->getSubNodes(\"arg\") }) {\n",
"    $synopsis .= $arg->escape($arg->getAttribute('name')).\", \";\n",
"  }\n",
"  if(substr($synopsis, -1, 1) eq \" \") {\n",
"    $synopsis = substr($synopsis, 0, length($synopsis)-2);\n",
"  }\n",
"  $synopsis .= \")\\n\";\n",
"  if($self->{mode} eq \"docbook\") {\n",
"    $synopsis .= \"</programlisting></para>\";\n",
"  } elsif($self->{mode} eq \"plain\") {\n",
"    $synopsis .= $ansi->end();\n",
"  }\n",
"  return $synopsis;\n",
"}\n",
"\n",
"sub outputArgs {\n",
"  my ($self, $node, $prefix, $call, $depth) = @_;\n",
"  my $foundArgs = 0;\n",
"  my $s = \"\";\n",
"  if($self->{mode} eq \"docbook\") {\n",
"    $s .= \"    <table>\n",
"      <title>Arguments</title>\n",
"      <tgroup cols=\\\"2\\\">\n",
"        <tbody>\";\n",
"  } elsif($self->{mode} eq \"plain\") {\n",
"    $s .= \"\\n\".$self->{plainSectionColor}.\"Arguments:\\n\".$ansi->end();\n",
"  }\n",
"  foreach my $arg (@{ $node->getSubNodes('arg') }) {\n",
"    if(scalar(@{ $arg->getChilds() }) > 0) {\n",
"      if($self->{mode} eq \"docbook\") {\n",
"	$s .= \"          <row>\n",
"            <entry>\".$arg->getAttribute('name').\"</entry>\n",
"            <entry>\";\n",
"      } elsif($self->{mode} eq \"plain\") {\n",
"	my $argName = $arg->getAttribute('name');\n",
"	$argName =~ s/\\s*([^\\s].*[^\\s]?)\\s*/$1/;\n",
"	$s .= \"  \".$self->{plainArgColor}.$argName.\": \".$ansi->end();\n",
"      }\n",
"\n",
"      foreach my $c (@{ $arg->getChilds() }) {\n",
"	$s .= $self->generate($c, $prefix, $call, $depth);\n",
"      }\n",
"\n",
"      if($self->{mode} eq \"docbook\") {\n",
"	$s .= \"</entry>\n",
"          </row>\";\n",
"      } elsif($self->{mode} eq \"plain\") {\n",
"	$s .= \"\\n\";\n",
"      }\n",
"      $foundArgs += 1;\n",
"    }\n",
"  }\n",
"  if($self->{mode} eq \"docbook\") {\n",
"    $s .= \"\n",
"        </tbody>\n",
"      </tgroup>\n",
"    </table>\n",
"\"\n",
"  }\n",
"\n",
"  if($foundArgs > 0) {\n",
"    return $s;\n",
"  }\n",
"  return \"\";\n",
"}\n",
"\n",
"sub outputOverview {\n",
"  my ($self, $node, $prefix, $call, $depth) = @_;\n",
"  my $s = \"\";\n",
"  my $tagNames = $node->getChildTagNames();\n",
"  for(my $i=0; $i<scalar(@$tagNames); ++$i) {\n",
"    while($i<scalar(@$tagNames) &&\n",
"	  ($tagNames->[$i] eq \"description\" ||\n",
"	   $tagNames->[$i] eq \"example\")) {\n",
"      splice(@$tagNames, $i, 1);\n",
"    }\n",
"  }\n",
"  foreach my $tagName (@$tagNames) {\n",
"    my $title = \"\";\n",
"    if($self->{mode} eq \"plain\") {\n",
"      $title .= $self->{plainHeadingColor};\n",
"    }\n",
"    if($tagName eq \"function\") {\n",
"      $title .= \"Functions\";\n",
"    } elsif($tagName eq \"topic\") {\n",
"      $title .= \"Topics\";\n",
"    } elsif($tagName eq \"class\") {\n",
"      $title .= \"Classes\";\n",
"    } elsif($tagName eq \"module\") {\n",
"      $title .= \"Modules\";\n",
"    }\n",
"    if($self->{mode} eq \"plain\") {\n",
"      $title .= \":\".$ansi->end();\n",
"      $s .= \"\\n\".$title.\"\\n\";\n",
"    }\n",
"    my $i = 0;\n",
"    my $line = \"\";\n",
"    foreach my $child (@{ $node->getSubNodes($tagName) }) {\n",
"      if((not $child->hasAttribute('restriction')) ||\n",
"	 ($child->getAttribute('restriction') eq $self->{langID})) {\n",
"	if($self->{mode} eq \"plain\") {\n",
"	  $line .= $child->getAttribute('name');\n",
"	}\n",
"	$i += 1;\n",
"	if($i % 3 == 0) {\n",
"	  $i = 0;\n",
"	  if($self->{mode} eq \"plain\") {\n",
"	    $s .= $line .\"\\n\";\n",
"	    $line = \"\";\n",
"	  }\n",
"	} else {\n",
"	  if($self->{mode} eq \"plain\") {\n",
"	    while(length($line) % 30 != 0) {\n",
"	      $line .= \" \";\n",
"	    }\n",
"	  }\n",
"	}\n",
"      }\n",
"    }\n",
"    if($line ne \"\") {\n",
"      $s .= $line . \"\\n\";\n",
"    }\n",
"  }\n",
"  if($self->{mode} eq \"plain\") {\n",
"    $s .= \"\\n\";\n",
"  }\n",
"  return $s;\n",
"}\n",
"\n",
"sub outputContainer {\n",
"  my ($self, $node, $prefix, $call, $depth) = @_;\n",
"  my $s = \"\";\n",
"\n",
"  my $name = $node->getAttribute('name');\n",
"  my $myprefix = $name;\n",
"  if($prefix ne \"\") {\n",
"    $myprefix = $prefix . \"_\" . $name;\n",
"  }\n",
"  my $mycall = $name;\n",
"  if($call ne \"\") {\n",
"    $mycall = $call . \"::\" . $name;\n",
"  }\n",
"\n",
"  my $title = \"\";\n",
"  if($node->getTagName() eq \"module\") {\n",
"    $title = \"Module \" . $name;\n",
"  } elsif($node->getTagName() eq \"topic\") {\n",
"    $title = \"Topic \" . $name;\n",
"  } elsif($node->getTagName() eq \"class\") {\n",
"    $title = \"Class \" . $name;\n",
"  } elsif($node->getTagName() eq \"function\") {\n",
"    $title = $name;\n",
"  } else {\n",
"    $title = $self->{Lang} . \" Developer's Guide to Xpertmud\";\n",
"  }\n",
"  my $sect = \"sect\" . $depth;\n",
"  if($depth == 0) {\n",
"    $sect = \"chapter\";\n",
"  }\n",
"\n",
"  if($self->{mode} eq \"docbook\") {\n",
"    $s .= \"  <\".$sect.\" id=\\\"\".$self->escapeId($myprefix).\"\\\">\n",
"    <title>\".$title.\"</title>\n",
"\";\n",
"  } elsif($self->{mode} eq \"plain\") {\n",
"    $s .= $self->{plainHeadingColor}.$title.\":\".$ansi->end().\"\\n\".$self->{plainUnderlineColor}.(\"*\" x (length($title)+1)).$ansi->end().\"\\n\";\n",
"  }\n",
"\n",
"  if((not $self->{mode} eq \"docbook\") && (not $node->getTagName() eq \"function\")) {\n",
"    if($self->{subHelpText} ne \"\") {\n",
"      $s .= $self->{subHelpText} . \"\\n\";\n",
"    }\n",
"    foreach my $sub (@{ $node->getSubNodes('description') }) {\n",
"      $s .= $self->generate($sub, $myprefix, $mycall, $depth+1);\n",
"    }\n",
"    foreach my $sub (@{ $node->getSubNodes('example') }) {\n",
"      $s .= $self->generate($sub, $myprefix, $mycall, $depth+1);\n",
"    }\n",
"  }\n",
"\n",
"  if($node->getTagName() eq \"function\") {\n",
"    $s .= $self->outputSynopsis($node);\n",
"    $s .= $self->outputArgs($node, $myprefix, $mycall, $depth+1);\n",
"  } else {\n",
"    $s .= $self->outputOverview($node, $myprefix, $mycall, $depth+1);\n",
"  }\n",
"\n",
"  if(($self->{mode} eq \"docbook\") || ($node->getTagName() eq \"function\")) {\n",
"    foreach my $tag (@{ $node->getChildTagNames() }) {\n",
"      if($tag ne \"arg\") {\n",
"	foreach my $sub (@{ $node->getSubNodes($tag) }) {\n",
"	  $s .= $self->generate($sub, $myprefix, $mycall, $depth+1);\n",
"	}\n",
"      }\n",
"    }\n",
"  }\n",
"\n",
"  if($self->{mode} eq \"docbook\") {\n",
"    $s .= \"  </\".$sect.\">\n",
"\";\n",
"  }\n",
"  return $s;\n",
"}\n",
"\n",
"sub whiteSpaceKiller {\n",
"  my ($self, $s) = @_;\n",
"  my $ret = $s;\n",
"  $ret =~ s/[\\s\\n]+/ /g;\n",
"  if($self->{plainSpace}) {\n",
"    $ret =~ s/^\\s//;\n",
"  }\n",
"  return $ret;\n",
"}\n",
"\n",
"sub generate {\n",
"  my ($self, $node, $prefix, $call, $depth, $cwhite) = @_;\n",
"  $prefix = $prefix || $self->{lang};\n",
"  $call = $call || \"\";\n",
"  $depth = $depth || 0;\n",
"  $cwhite = $cwhite || 0;\n",
"\n",
"  if(not ref $node) {\n",
"    if($self->{mode} eq \"docbook\") {\n",
"      return new XMXmlNode(\"\")->escape($node);\n",
"    } else {\n",
"      if($cwhite) {\n",
"	$self->{plainSpace} = 0;\n",
"	return $node;\n",
"      } else {\n",
"	my $ret = $self->whiteSpaceKiller($node);\n",
"	if($ret eq \" \") {\n",
"	  $ret = \"\";\n",
"	}\n",
"	$self->{plainSpace} = 0;\n",
"	return $ret;\n",
"      }\n",
"    }\n",
"  }\n",
"\n",
"  my $s = \"\";\n",
"  my $tagName = $node->getTagName();\n",
"  if($node->getTagName() eq \"module\" ||\n",
"     $node->getTagName() eq \"class\" ||\n",
"     $node->getTagName() eq \"topic\" ||\n",
"     $node->getTagName() eq \"help\" ||\n",
"     $node->getTagName() eq \"function\") {\n",
"    if((not $node->getTagName() eq \"function\") ||\n",
"       (not $node->hasAttribute('restriction')) ||\n",
"       ($node->getAttribute('restriction') eq $self->{langID})) {\n",
"      $s .= $self->outputContainer($node, $prefix, $call, $depth);\n",
"    }\n",
"  } elsif(grep(/$tagName/, @{ $self->{allIDs} }) &&\n",
"	  $node->getTagName() ne $self->{langID}) {\n",
"    ; # pass\n",
"  } elsif($node->getTagName() eq $self->{langID}) {\n",
"    foreach my $c (@{ $node->getChilds() }) {\n",
"      $s .= $self->generate($c, $prefix, $call, $depth, 1);\n",
"    }\n",
"  } elsif($node->getTagName() eq \"alt\") {\n",
"    foreach my $c (@{ $node->getChilds() }) {\n",
"      if(ref $c) {\n",
"	$s .= $self->generate($c, $prefix, $call, $depth);\n",
"      }\n",
"    }\n",
"  } elsif($node->getTagName() eq \"description\") {\n",
"    if(scalar(@{ $node->getSubNodes(\"para\") }) == 0) {\n",
"      if($self->{mode} eq \"docbook\") {\n",
"	$s .= \"<para>\";\n",
"      }\n",
"      for my $c (@{ $node->getChilds() }) {\n",
"	if($self->{mode} eq \"docbook\") {\n",
"	  $s .= $self->generate($c, $prefix, $call, $depth);\n",
"	} elsif($self->{mode} eq \"plain\") {\n",
"	  $s .= $self->generate($c, $prefix, $call, $depth);\n",
"	}\n",
"      }\n",
"      if($self->{mode} eq \"docbook\") {\n",
"	$s .= \"</para>\";\n",
"      } elsif($self->{mode} eq \"plain\") {\n",
"	$s .= \"\\n\";\n",
"	$self->{plainSpace} = 1;\n",
"      }\n",
"    } else {\n",
"      foreach my $c (@{ $node->getChilds() }) {\n",
"	if((not ref $c) || $c->getTagName() eq \"para\") {\n",
"	  if($self->{mode} eq \"docbook\") {\n",
"	    $s .= \"<para>\";\n",
"	  }\n",
"	}\n",
"	if($self->{mode} eq \"docbook\") {\n",
"	  $s .= $self->generate($c, $prefix, $call, $depth);\n",
"	} elsif($self->{mode} eq \"plain\") {\n",
"	  $s .= $self->generate($c, $prefix, $call, $depth);\n",
"	  my $lastChild =\n",
"	    $node->getChilds()->[scalar(@{ $node->getChilds() })-1];\n",
"	  if(((not ref $lastChild) || $c !=  $lastChild) &&\n",
"	     ref $c &&\n",
"	     $c->getTagName() eq \"para\") {\n",
"	    $s .= \"\\n\";\n",
"	    $self->{plainSpace} = 1;\n",
"	  }\n",
"	}\n",
"	if((not ref $c) || $c->getTagName() eq \"para\") {\n",
"	  if($self->{mode} eq \"docbook\") {\n",
"	    $s .= \"</para>\";\n",
"	  }\n",
"	}\n",
"      }\n",
"    }\n",
"  } elsif($node->getTagName() eq \"code\") {\n",
"    if($self->{mode} eq \"docbook\") {\n",
"      $s .= \"<programlisting>\";\n",
"    } elsif($self->{mode} eq \"plain\") {\n",
"      $s .= \"\\n\" . $self->{plainCodeColor};\n",
"    }\n",
"    foreach my $c (@{ $node->getChilds() }) {\n",
"      $s .= $self->generate($c, $prefix, $call, $depth, 1);\n",
"    }\n",
"    if($self->{mode} eq \"docbook\") {\n",
"      $s .= \"</programlisting>\";\n",
"    } elsif($self->{mode} eq \"plain\") {\n",
"      $s .= $ansi->end() . \"\\n\";\n",
"      $self->{plainSpace} = 1;\n",
"    }\n",
"  } elsif($node->getTagName() eq \"example\") {\n",
"    if($self->{mode} eq \"docbook\") {\n",
"      $s .= \"<para><programlisting>Example:\\n\";\n",
"    } elsif($self->{mode} eq \"plain\") {\n",
"      $s .= \"\\n\".$self->{plainSectionColor}.\"Example:\\n\".$ansi->end().$self->{plainCodeColor};\n",
"    }\n",
"    foreach my $c (@{ $node->getChilds() }) {\n",
"      $s .= $self->generate($c, $prefix, $call, $depth, 1);\n",
"    }\n",
"    if($self->{mode} eq \"docbook\") {\n",
"      $s .= \"</programlisting></para>\";\n",
"    } elsif($self->{mode} eq \"plain\") {\n",
"      $s .= $ansi->end() . \"\\n\";\n",
"      $self->{plainSpace} = 1;\n",
"    }\n",
"  } elsif(grep(/$tagName/, $ansi->getKeys())) {\n",
"    if($self->{mode} eq \"plain\") {\n",
"      $s .= $ansi->getCode($node->getTagName());\n",
"    }\n",
"    foreach my $c (@{ $node->getChilds() }) {\n",
"      $s .= $self->generate($c, $prefix, $call, $depth);\n",
"    }\n",
"    if($self->{mode} eq \"plain\") {\n",
"      $s .= $ansi->end();\n",
"    }\n",
"  } else {\n",
"    foreach my $c (@{ $node->getChilds() }) {\n",
"      $s .= $self->generate($c, $prefix, $call, $depth);\n",
"    }\n",
"  }\n",
"  return $s;\n",
"}\n",
"\n",
"1;\n",
"\n",
"############################################################\n",
"package XMWindow;\n",
"use strict;\n",
"use warnings;\n",
"\n",
"{\n",
"  my @allWindows;\n",
"\n",
"  sub register {\n",
"    my $self=shift;\n",
"    $allWindows[$self->getID()]=$self;\n",
"    XM::weaken($allWindows[$self->getID()]);\n",
"  }\n",
"  \n",
"  sub get { # \"static\"\n",
"    my $id=shift;\n",
"    if($id == 0) {\n",
"      return ::statusWindow();\n",
"    }\n",
"    return $allWindows[$id];\n",
"  }\n",
"}\n",
"\n",
"sub getSize {\n",
"  my $self=shift;\n",
"  return ($self->getSizeX, $self->getSizeY);\n",
"}\n",
"\n",
"sub getWidth {\n",
"  return shift->getSizeX;\n",
"}\n",
"\n",
"sub getHeight {\n",
"  return shift->getSizeY;\n",
"}\n",
"\n",
"sub getID {\n",
"  return shift->{_ID};\n",
"}\n",
"\n",
"sub getPosition {\n",
"  my $self=shift;\n",
"  return ($self->getPositionX, $self->getPositionY);\n",
"}\n",
"\n",
"\n",
"sub DESTROY {\n",
"  my $self=shift;\n",
"  $self->close if $self->isValid();\n",
"}\n",
"\n",
"############################################################\n",
"package XMTextWindow;\n",
"use strict;\n",
"use warnings;\n",
"\n",
"use vars qw(@ISA);\n",
"@ISA= qw(XMWindow);\n",
"\n",
"sub new {\n",
"  my ($this,$title)=@_;\n",
"  my $class = ref($this) || $this;\n",
"  my %tmp= (\n",
"	    _ID=>-1\n",
"	   );\n",
"  my $self=bless \\%tmp,$class;\n",
"\n",
"  $self->{_ID} = initialize();\n",
"  $self->setTitle($title) if defined $title;\n",
"  $self->register;\n",
"  return $self;\n",
"}\n",
"\n",
"sub getCursorPos {\n",
"  my $self=shift;\n",
"  return ($self->getCursorX, $self->getCursorY);\n",
"}\n",
"\n",
"sub getSizeChars {\n",
"  my $self=shift;\n",
"  return ($self->getColumns, $self->getLines);\n",
"}\n",
"\n",
"sub registerMouseDownEvent {\n",
"  my $self = shift;\n",
"  my $funcRef = shift;\n",
"  push(@{ $self->{_MOUSE_DOWN}}, $funcRef);\n",
"}\n",
"\n",
"sub registerMouseDragEvent {\n",
"  my $self = shift;\n",
"  my $funcRef = shift;\n",
"  push(@{ $self->{_MOUSE_DRAG}}, $funcRef);\n",
"}\n",
"\n",
"sub registerMouseUpEvent {\n",
"  my $self = shift;\n",
"  my $funcRef = shift;\n",
"  push(@{ $self->{_MOUSE_UP}}, $funcRef);\n",
"}\n",
"\n",
"sub printMux {\n",
"  $_[0]->print(ansi($_[1]));\n",
"}\n",
"\n",
"############################################################\n",
"package XMTextBufferWindow;\n",
"use strict;\n",
"use warnings;\n",
"\n",
"use vars qw(@ISA);\n",
"@ISA= qw(XMTextWindow);\n",
"\n",
"sub new {\n",
"  my ($this,$title)=@_;\n",
"  my $class = ref($this) || $this;\n",
"  my %tmp= (\n",
"	    _ID=>-1\n",
"	   );\n",
"  my $self=bless \\%tmp,$class;\n",
"\n",
"  $self->{_ID} = initialize();\n",
"  $self->setTitle($title) if defined $title;\n",
"  $self->register;\n",
"  return $self;\n",
"}\n",
"\n",
"\n",
"############################################################\n",
"package XMPlugin;\n",
"use strict;\n",
"use warnings;\n",
"\n",
"use vars qw(@ISA);\n",
"@ISA= qw(XMWindow);\n",
"\n",
"sub new {\n",
"  my ($this,$lib,$cls,$title)=@_;\n",
"  my $class = ref($this) || $this;\n",
"  my %tmp= (\n",
"	    _ID=>-1,\n",
"	    _LIBRARY=>$lib,\n",
"	    _CLASS=>$cls\n",
"	   );\n",
"  my $self=bless \\%tmp,$class;\n",
"\n",
"  $self->{_ID} = initialize($lib,$cls);\n",
"\n",
"  return undef if ($self->getID()<0);\n",
"\n",
"  $self->setTitle($title) if defined $title;\n",
"  $self->register;\n",
"  return $self;\n",
"}\n",
"\n",
"sub function {\n",
"  my ($self,$id,$args)=@_;\n",
"  print \"External function call on XMPlugin\\n\";\n",
"  print \"FunctionID: $id, Argument: $args\\n\";\n",
"  print \"Reimplement 'sub function' in your Plugin class!\\n\";\n",
"  return \"Unimplemented Function\";\n",
"}\n",
"\n",
"############################################################\n",
"package XMConnection;\n",
"use strict;\n",
"use warnings;\n",
"\n",
"sub getID {\n",
"  my ($self) = @_;\n",
"  return $self->{_ID};\n",
"}\n",
"\n",
"{\n",
"  # TODO: weak refs?\n",
"  # remove in onConnectionDropped callback?\n",
"my $instances = {};\n",
"\n",
"sub new {\n",
"  my ($this,$host,$port,$onConnect)=@_;\n",
"  my $class = ref($this) || $this;\n",
"  my %tmp= (\n",
"	    _ID=>-1,\n",
"	   );\n",
"  my $self=bless \\%tmp,$class;\n",
"\n",
"  $self->{_ID} = initialize($host,$port,$onConnect);\n",
"\n",
"  return undef if ($self->getID()<0);\n",
"\n",
"  $instances->{$self->getID()} = $self;\n",
"\n",
"  return $self;\n",
"}\n",
"\n",
"sub getByID {\n",
"  my ($id) = @_;\n",
"  if(not exists $instances->{$id}) {\n",
"    my $newCon = bless\n",
"      { _ID => $id }, \"XMConnection\";\n",
"    $instances->{$id} = $newCon;\n",
"  }\n",
"  return $instances->{$id};\n",
"}\n",
"}\n",
"\n",
"############################################################\n",
"package XMInputLine;\n",
"use strict;\n",
"use warnings;\n",
"\n",
"sub getID {\n",
"  my ($self) = @_;\n",
"  return $self->{_ID};\n",
"}\n",
"\n",
"{\n",
"my $instances = {};\n",
"\n",
"sub getByID {\n",
"  my ($id) = @_;\n",
"  if(not exists $instances->{$id}) {\n",
"    my $newLine = bless\n",
"      { _ID => $id }, \"XMInputLine\";\n",
"    $instances->{$id} = $newLine;\n",
"  }\n",
"  return $instances->{$id};\n",
"}\n",
"}\n",
"\n",
"############################################################\n",
"package XMRedirector;\n",
"use strict;\n",
"use warnings;\n",
"\n",
"sub TIEHANDLE {\n",
"  my $this=shift;\n",
"  my $class = ref $this || $this;\n",
"\n",
"  my $win=shift;\n",
"  my $color=shift;\n",
"  my $self=bless {\n",
"		  win=>$win,\n",
"		 }, $class;\n",
"  if (defined $color) {\n",
"    $self->{color}=$color;\n",
"  }\n",
"\n",
"  return $self;\n",
"}\n",
"\n",
"sub changeWindow {\n",
"  my ($self,$win)=@_;\n",
"  $self->{win}=$win;\n",
"}\n",
"\n",
"sub PRINT {\n",
"  my $self=shift;\n",
"  if (defined $self->{color}) {\n",
"    $self->{win}->setFGColor($self->{color});\n",
"  }\n",
"  foreach my $chunk (@_) {\n",
"    $self->{win}->print($chunk);\n",
"  }\n",
"  if (defined $self->{color}) {\n",
"    $self->{win}->resetAttributes;\n",
"  }\n",
"}\n",
"\n",
"\n",
"############################################################\n",
"package XM;\n",
"use strict;\n",
"use warnings;\n",
"no warnings qw/once/;\n",
"\n",
"#conveniance/compatibility functions\n",
"\n",
"*showKeyNames=\\&::showKeyNames;\n",
"*addIncludeDir=\\&::addIncludeDir;\n",
"*ansi=\\&::ansi;\n",
"*prs=\\&::prs;\n",
"*psw=\\&::psw;\n",
"*connection=\\&::connection;\n",
"*sendText=\\&::sendText;\n",
"*activeWindow=\\&::activeWindow;\n",
"*focusedInputLine=\\&::focusedInputLine;\n",
"*statusWindow=\\&::statusWindow;\n",
"\n",
"*addTrigger=\\&::addTrigger;\n",
"*delTrigger=\\&::delTrigger;\n",
"*setTriggerState=\\&::setTriggerState;\n",
"*listTriggers=\\&::listTriggers;\n",
"\n",
"*addAlias=\\&::addAlias;\n",
"*updateAlias=\\&::updateAlias;\n",
"*delAlias=\\&::delAlias;\n",
"*setAliasState=\\&::setAliasState;\n",
"*listAliases=\\&::listAliases;\n",
"\n",
"*addKeyBinding=\\&::addKeyBinding;\n",
"*delKeyBinding=\\&::delKeyBinding;\n",
"*setKeyBindingState=\\&::setKeyBindingState;\n",
"*listKeyBindings=\\&::listKeyBindings;\n",
"\n",
"*addTimer=\\&::addTimer;\n",
"*delTimer=\\&::delTimer;\n",
"*setTimerState=\\&::setTimerState;\n",
"*setTimerInc=\\&::setTimerInc;\n",
"*listTimers=\\&::listTimers;\n",
"\n",
"*addDelayed=\\&::addDelayed;\n",
"*delDelayed=\\&::delDelayed;\n",
"*setDelayed=\\&::setDelayed;\n",
"*listDelayed=\\&::listDelayed;\n",
"\n",
"*parse=\\&::parse;\n",
"*setLocalEcho=\\&::setLocalEcho;\n",
"*setWriteRegExps=\\&::setWriteRegExps;\n",
"*resetWriteRegExps=\\&::resetWriteRegExps;\n",
"\n",
"\n",
"1;\n",
0 };
#endif
